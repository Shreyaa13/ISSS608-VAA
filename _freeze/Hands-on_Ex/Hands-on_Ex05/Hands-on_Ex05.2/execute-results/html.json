{
  "hash": "d56d2f640d1cf9366a16e654b609d3fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Ex 5.2 - Visual Correlation Analysis\"\nauthor: \"Shreya Agarwal\"\ndate: \"February 6, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  message: false\n  freeze: true\n---\n\n\n\n# **5.1 Overview**\n\nThe correlation coefficient is a widely used statistic for measuring both the strength and type of relationship between two variables. Its values range from -1.0 to 1.0, where a coefficient of 1 indicates a perfect linear relationship, -1.0 signifies a perfect inverse relationship, and 0.0 suggests no linear correlation between the variables.\n\nWhen dealing with multivariate data, correlation coefficients for all pairwise comparisons are typically displayed in a table format known as a correlation matrix or scatterplot matrix.\n\nThere are three primary reasons for computing a correlation matrix:\n\n1.  To examine relationships between high-dimensional variables on a pairwise basis.\n2.  To serve as an input for other statistical analyses, such as exploratory factor analysis, confirmatory factor analysis, structural equation modeling, and linear regression, particularly when handling missing values pairwise.\n3.  To act as a diagnostic tool in other analyses. For instance, in linear regression, a high degree of correlation among variables may indicate unreliable estimates.\n\nFor large datasets with numerous observations and variables, a corrgram is often used to visually analyze and explore relationships among variables. The design of a corrgram is based on two key principles:\n\n-   Representing the sign and magnitude of correlations through visual elements.\n-   Reordering variables in the correlation matrix so that similar variables are placed next to each other, making patterns easier to identify.\n\nThis hands-on exercise will guide you through visualizing correlation matrices in R. It consists of three sections: creating a correlation matrix using `pairs()` from R Graphics, plotting a corrgram with the **corrplot** package, and generating an interactive correlation matrix using the `plotly` package in R.\n\n# **5.2 Installing and Launching R Packages**\n\nThe code chunk below is used to install and launch **corrplot**, **ggpubr**, **plotly** and **tidyverse** in RStudio.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n\n# **5.3 Importing and Preparing The Data Set**\n\nIn this hands-on exercise, we will use the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) from the UCI Machine Learning Repository. This dataset contains 13 variables and 6,497 observations. For the purpose of this exercise, both red and white wine data have been merged into a single CSV file named *wine_quality.csv*.\n\n## **5.3.1 Importing Data**\n\nFirst, we import the data into R by using *read_csv()* of **readr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\nBeside quality and type, the rest of the variables are numerical and continuous data type.\n\n# **5.4 Building Correlation Matrix: *pairs()* method**\n\nThere are more than one way to build scatterplot matrix with R. In this section, we will create a scatterplot matrix by using the *pairs* function of R Graphics.\n\n## **5.4.1 Building a basic correlation matrix**\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nThe `pairs()` function requires a matrix or data frame as input. Creating a scatterplot matrix with `pairs()` is straightforward, using its default settings. In this case, columns 2 to 12 of the wine data frame are selected to generate the scatterplot matrix. These columns represent key variables such as fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, and alcohol.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## **5.4.2 Drawing the lower corner**\n\nThe `pairs()` function in R Graphics offers various customization options. One common practice is to display only the upper or lower half of the correlation matrix since it is symmetric. To show only the lower half, the `upper.panel` argument is used, as demonstrated in the code snippet below. This helps reduce redundancy and makes the visualization more readable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## **5.4.3 Including with correlation coefficients**\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, [*panel.cor*](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function will be used. This will also show higher correlations in a larger font.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# **5.5 Visualising Correlation Matrix: ggcormat()**\n\nOne major limitation of the correlation matrix is that scatterplots can become overly cluttered when dealing with a large number of observations (typically more than 500). To address this issue, the corrgram visualization technique, introduced by D. J. Murdoch and E. D. Chow (1996) and later refined by M. Friendly (2002), is used.\n\nAt least three R packages offer functions for creating corrgrams:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\nAdditionally, some packages, such as ggstatsplot, also provide functions for constructing corrgrams.\n\nIn this section, you will learn how to visualize a correlation matrix using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html)  from the **ggstatsplot** package.\n\n## **5.5.1 The basic plot**\n\nOne of the advantage of using *ggcorrmat()* over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nKey takeaways from the code chunk above:\n\n-   The `cor.vars` argument is used to compute the correlation matrix, which serves as the foundation for the corrgram.\n-   The `ggcorrplot.args` argument allows for additional (mainly aesthetic) customizations that will be passed to the `ggcorrplot::ggcorrplot` function. However, certain arguments—such as `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, and `digits`—should be avoided, as they are already internally handled.\n\nA sample sub-code chunk can be used to fine-tune specific elements of the plot, such as adjusting the font size for the x-axis, y-axis, and statistical report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n\n# **5.6 Building multiple plots**\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nThings to learn from the code chunk above:\n\n-   to build a facet plot, the only argument needed is `grouping.var`.\n-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.\n-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.\n\n# **5.7 Visualising Correlation Matrix using corrplot Package**\n\nIn this hands-on exercise, we will focus on corrplot. \n\n## **5.7.1 Getting started with corrplot**\n\nBefore we can plot a corrgram using *corrplot()*, we need to compute the correlation matrix of wine data frame.\n\nIn the code chunk below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\n\nNext, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nBy default, the corrgram is visualized using circles within a symmetric matrix layout. The color scheme follows a diverging blue-red gradient, where blue represents positive correlations and red indicates negative correlations. The intensity or saturation of the color reflects the strength of the correlation coefficient—darker shades signify a stronger linear relationship between variables, while lighter shades indicate a weaker correlation.\n\n## **5.7.2 Working with visual geometrics**\n\nThe **corrplot** package offers seven different geometric representations (specified via the `method` parameter) to visually encode correlation values: circle, square, ellipse, number, shade, color, and pie. By default, the *circle* method is used. However, this can be modified using the `method` argument, as demonstrated in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## **5.7.3 Working with layout**\n\n*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## **5.7.4 Working with mixed layout**\n\nWith **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.\n\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nHere, the *lower* and *upper* arguments define the visualization methods for different halves of the corrgram. In this case, ellipses represent the lower half, while numerical values map the upper half. The *tl.pos* argument controls the placement of axis labels, and the *diag* argument specifies the glyph used along the principal diagonal of the corrgram.\n\n## **5.7.5 Combining corrgram with the significant test**\n\nIn statistical analysis, it is important to determine which pairs of variables have correlation coefficients that are statistically significant. The figure below presents a corrgram combined with significance testing, highlighting that not all correlation pairs are statistically significant. For instance, the correlation between total sulfur dioxide and free sulfur dioxide is significant at a 0.1 significance level, whereas the correlation between total sulfur dioxide and citric acid is not.\n\n![](images/clipboard-1624339769.png){width=\"441\"}\n\nWith corrplot package, we can use the *cor.mtest()* to compute the p-values and confidence interval for each pair of variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\n\nWe can then use the *p.mat* argument of *corrplot* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## **5.7.6 Reorder a corrgram**\n\nReordering the matrix in a corrgram is crucial for uncovering hidden structures and patterns. By default, the attributes in a corrgram are arranged according to the original correlation matrix. However, this default setting can be modified using the order argument in corrplot(). The **corrplot** package supports four ordering methods:\n\n-   **\"AOE\"** (Angular Order of the Eigenvectors): This method orders variables based on their eigenvectors, as described by Michael Friendly (2002).\n-   **\"FPC\"** (First Principal Component): Variables are ordered based on the first principal component.\n-   **\"hclust\"** (Hierarchical Clustering): Groups similar variables together based on a clustering algorithm. The agglomeration method can be specified using `hclust.method`, which supports options such as \"ward\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", or \"centroid\".\n-   **\"alphabet\"**: Orders variables alphabetically.\n\nAdditional ordering algorithms can be found in the **seriation** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n## **5.7.7 Reordering a correlation matrix using hclust**\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05.2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n# **5.8 Reference**\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.\n\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 178–180.\n\n## **5.8.1 R packages**\n\n-   [`ggcormat()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package\n-   [`ggscatmat`](https://ggobi.github.io/ggally/reference/ggscatmat.html) and [`ggpairs`](https://ggobi.github.io/ggally/reference/ggpairs.html) of [**GGally**](https://ggobi.github.io/ggally/index.html).\n-   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/index.html). A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\n-   [**corrgram**](https://cran.r-project.org/web/packages/corrgram/index.html) calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n",
    "supporting": [
      "Hands-on_Ex05.2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}