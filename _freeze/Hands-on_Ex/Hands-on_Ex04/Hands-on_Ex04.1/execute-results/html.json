{
  "hash": "9ce70ed5aec229d5fe904735cb999669",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Ex 4.1 - Visualising Distribution\"\nauthor: \"Shreya Agarwal\"\ndate: \"February 1, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  message: false\n  freeze: true\n---\n\n\n# **4.1 Learning Outcome**\n\nVisualizing distribution is a common practice in statistical analysis. We already explored methods like histograms, PDFs, boxplots, notch plots, and violin plots using ggplot2. This chapter introduces two newer techniques—ridgeline and raincloud plots—using ggplot2 and its extensions.\n\n# **4.2 Getting Started**\n\n## **4.2.1 Installing and loading the packages**\n\nThis exercise uses the following R packages:\n\n-   **ggridges**: For ridgeline plots (ggplot2 extension)\n-   **ggdist**: For visualizing distribution and uncertainty\n-   **tidyverse**: For modern data science and visualization\n-   **ggthemes**: For additional themes, scales, and geoms in ggplot\n-   **colorspace**: For color selection and manipulation in visualizations\n\nThe code chunk below loads these packages into the RStudio environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n## **4.2.2 Data import**\n\nFor this exercise, *Exam_data.csv* will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n# **4.3 Visualising Distribution with Ridgeline Plot**\n\nA [*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) (or *Joyplot*) visualizes the distribution of a numeric variable across groups using overlapping histograms or density plots.\n\nThe figure below shows the distribution of English scores by class.\n\n![](images/clipboard-3897783365.png)\n\nRidgeline plots are useful for displaying many groups efficiently, as overlapping saves space. However, for fewer than five groups, other distribution plots may work better. They are most effective when a clear ranking exists; otherwise, excessive overlap can make the plot unclear.\n\n## **4.3.1 Plotting ridgeline graph: ggridges method**\n\nThere are multiple ways to create ridgeline plots in R. This section covers using the ggridges package, which provides two main geoms: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) (uses height values directly) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html)(estimates densities before plotting). The example below uses `geom_density_ridges()`.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n## **4.3.2 Varying fill colors along the x axis**\n\nTo create ridgeline plots with varying fill colors along the x-axis, use  [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). These function like their non-gradient counterparts but allow color variation instead of a solid fill. However, they do not support alpha transparency due to technical limitations.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n## **4.3.3 Mapping the probabilities directly onto colour**\n\nIn addition to extra geom objects for ridgeline plots, the ggridges package offers [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) in ggplot2. The figure below maps probabilities using **stat(ecdf)**, representing the empirical cumulative density function for English\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n:::\n\n## **4.3.4 Ridgeline plots with quantile lines**\n\nUsing [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can color the ridgeline plot by quantile with the **stat(quantile)** aesthetic, as shown in the figure below.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n:::\n\nInstead of using numbers to define quantiles, we can specify quantiles by cut points, such as the 2.5% and 97.5% tails, to color the ridgeline plot, as shown below.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n:::\n\n# **4.4 Visualising Distribution with Raincloud Plot**\n\nRaincloud plot is a visualization technique that creates a half-density distribution plot, resembling a \"raincloud\". It enhances the boxplot by revealing multiple modalities, indicating possible groupings, and showing where densities are clustered, unlike the boxplot.\n\nIn this section, we will create a raincloud plot to visualize the distribution of English scores by race using ggdist and ggplot2 packages.\n\n## **4.4.1 Plotting a Half Eye graph**\n\nWe plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package. This produces a Half Eye visualization, which contains a half-density and a slab-interval.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n:::\n\n## **4.4.2 Adding the boxplot with `geom_boxplot()`**\n\nNext, we add a second geometry layer using ggplot2's [`geom_boxplot()`](https://r4va.netlify.app/chap09), which creates a narrower boxplot. The width is reduced and the opacity adjusted.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n:::\n\n## **4.4.3 Adding the Dot Plots with `stat_dots()`**\n\nNext, we add the third geometry layer using ggdist's `stat_dots()`, which creates a half-dotplot similar to a histogram. The side = \"left\" argument places it on the left-hand side.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n:::\n\n## **4.4.4 Finishing touch**\n\nFinally, `coord_flip()` from ggplot2 flips the raincloud chart horizontally for the raincloud effect, while `theme_economist()` from ggthemes gives it a polished, professional look.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04.1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n:::\n\n# **4.5 Reference**\n\n-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)\n-   Claus O. Wilke [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) especially Chapter [6](https://clauswilke.com/dataviz/visualizing-amounts.html), [7](https://clauswilke.com/dataviz/histograms-density-plots.html), [8](https://clauswilke.com/dataviz/ecdf-qq.html), [9](https://clauswilke.com/dataviz/boxplots-violins.html) and [10](https://clauswilke.com/dataviz/visualizing-proportions.html).\n-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \\[version 2; peer review: 2 approved\\]. Welcome Open Res 2021, pp. 4:63.\n-   [Dots + interval stats and geoms](https://mjskay.github.io/ggdist/articles/dotsinterval.html)\n",
    "supporting": [
      "Hands-on_Ex04.1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}