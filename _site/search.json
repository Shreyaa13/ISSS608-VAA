[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course.\nHi ! I am Shreya Agarwal pursuing Masters of IT in Business (MITB) specialising in Data Analytics from Singapore Management University (SMU). This website was created for my course ISSS608 - Visual Analytics taught by Professor Dr. Kam Tin Seong, where I will be uploading all the coursework being done by me."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this Author\nHi ! I am Shreya Agarwal pursuing Masters of IT in Business (MITB) specialising in Data Analytics from Singapore Management University (SMU). This website was created for my course ISSS608 - Visual Analytics where I will be uploading all the coursework being done by me."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse is packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse is packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: geom",
    "text": "Essential Grammatical Elements in ggplot2: geom\n\nggplot(data = exam_data,\n       aes(x = RACE)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) + \n  geom_histogram(bins = 20,\n                 color = \"grey30\")\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: Facets",
    "text": "Essential Grammatical Elements in ggplot2: Facets\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: themes",
    "text": "Essential Grammatical Elements in ggplot2: themes\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "This chapter introduces ggplot2 extensions for creating more elegant statistical graphics. We’ll learn to:\n\nPlace annotations effectively with the ggrepel package.\nCreate publication-quality figures using ggthemes and hrbrthemes.\nCombine ggplot2 graphs into composite figures with the patchwork package."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Refer to Tableau Public for the dashboard."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              size = 0.5) + \n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nAnnotating graphs with many data points can be challenging. The ggrepel package extends ggplot2 by providing geoms to prevent overlapping text, as shown in the examples.\nWe simply replace geom_text() with geom_text_repel() or geom_label() with geom_label_repel().\n\n2.3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              size = 0.5) + \n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#results",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#results",
    "title": "Hands-on Exercise 2",
    "section": "Results",
    "text": "Results\n\nThe plot\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nThe code\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              linewidth = 0.5) + \n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "This chapter introduces ggplot2 extensions for creating more elegant statistical graphics. We’ll learn to:\n\nPlace annotations effectively with the ggrepel package.\nCreate publication-quality figures using ggthemes and hrbrthemes.\nCombine ggplot2 graphs into composite figures with the patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting started",
    "text": "2.2 Getting started\n\n2.2.1 Installing and loading the required libraries\nIn this exercise, along with tidyverse, four R packages will be used:\n\nggrepel: Adds geoms to prevent overlapping text labels in ggplot2.\nggthemes: Offers extra themes, geoms, and scales for ggplot2.\nhrbrthemes: Focuses on typography-centric themes for ggplot2.\npatchwork: Facilitates combining ggplot2 plots into composite figures.\n\nThe code below checks if these packages are installed and loads them into the R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n2.2.2 Importing data\nThis exercise uses a CSV file, Exam_data, containing year-end exam grades of a cohort of Primary 3 students from a local school.\nThe code below imports exam_data.csv into the R environment using the read_csv() function from the readr package, which is part of tidyverse.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe exam_data tibble contains seven attributes: four categorical - ID, CLASS, GENDER, RACE and three continuous - MATHS, ENGLISH, SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 includes eight built-in themes (e.g., theme_gray(), theme_bw(), theme_minimal()).\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  theme_gray() + \n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n2.4.1 Working with ggtheme package\nggthemes package adds themes replicating plot styles from Tufte, Fivethirtyeight, The Economist, and more.\nIn the example below, the Economist theme is used. It also provides some extra geoms and scales for ‘ggplot2’.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths scores\") + \n  theme_economist()\n\n\n\n\n\n\n2.4.2 Working with hrbrthemes package\nThe hrbrthemes package offers a base theme emphasizing typography, including label placement and font customization.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths scores\") + \n  theme_ipsum()\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths scores\") + \n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\nObservations from the code chunk above :\n\naxis_title_size: Sets the font size of axis titles to 18.\nbase_size: Increases the default font size of axis labels to 15.\ngrid: Removes x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nTo tell a visual story, it’s common to combine multiple graphs. This section shows how to create composite plots by combining multiple graphs. First, we generate three graphs using the code below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) + \n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data = exam_data,\n       aes(x = ENGLISH)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) + \n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we draw a scatterplot for English score versus Maths score as shown below -\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              size = 0.5) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) + \n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n2.5.1 Creating Composite Graphics: pathwork methods\nSeveral ggplot2 extensions functions, like grid.arrange() of gridExtra package and plot_grid() of cowplot package, combine graphs into composites. The patchwork package simplifies this with intuitive syntax:\n\n+: Two-column layout.\n(): Groups subplots.\n/: Two-row layout.\n\n\n\n2.5.2 Combining two ggplot2 graphs\nUsing very simple syntax, we can now create a composite of two histograms using patchwork.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n2.5.3 Combining three ggplot2 graphs\nMore complex composites like the figure below is created using the operators:\n\n/: Stacks two ggplot2 plots.\n|: Places plots side by side.\n(): Defines the plotting sequence.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n2.5.4 Creating a composite figure with tag\npatchwork also provides auto-tagging properties to identify subplots in text.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n2.5.5 Creating figure with inset\nThe patchwork package not only arranges plots side by side with layouts but also allows free placement of plots or graphic elements using inset_element().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom  = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "Refer to Tableau Public for the dashboard."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, we check, install, and load the following R packages:\n\nggiraph: Makes ggplot graphics interactive.\nplotly: Creates interactive statistical graphs.\nDT: Provides an R interface to the JavaScript library DataTables for interactive tables.\ntidyverse: Supports data science tasks, including static statistical graphs.\npatchwork: Combines multiple ggplot2 graphs into one figure.\n\nThe code chunk below is used to accomplish this.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv will be imported using read_csv() from the readr package.\nThe code below reads Exam_data.csv into R and saves it as a tibble called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and ggplot2 extension that makes ggplot graphics interactive.\nInteractive is made with ggplot geometries  which supports three key arguments:\n\nTooltip: Displays text when hovering over elements.\nOnclick: Executes a JavaScript function on click.\nData_id: Assigns an ID to elements for interaction.\n\nIn Shiny apps, elements with data_id can be selected and manipulated on both client and server sides.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nThe code below demonstrates how to create an interactive statistical graph using ggiraph. It consists of two parts - First, we create a ggplot object and then use girafe()  from ggiraph to convert it into an interactive svg.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nThere are two steps involved. First, an interactive version of ggplot2 geom (geom_dotplot_interactive()) is used to create the basic graph. Then, girafe() is used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.5 Interactivity",
    "text": "3.5 Interactivity\nThe student’s ID will be displayed when we hover the mouse pointer on any data point.\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\nThe tooltip content can be customized by including a list object, as shown in the code below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines create a new tooltip field by combining ID and CLASS values. This tooltip field is then used in line 7 to display customized tooltips in the interactive plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity-1",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.6 Interactivity",
    "text": "3.6 Interactivity\nHovering over a data point displays the student’s ID and Class as a tooltip.\n\n\n\n\n\n\n\n3.6.1 Customising Tooltip style\nThe code below uses opts_tooltip() from ggiraph to customize tooltip rendering with CSS declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNow the background colour of the tooltip is white and the font colour is black and bold.\n\n\n\n\n\n\n\n\n3.6.2 Displaying statistics on tooltip\nThe code below demonstrates an advanced tooltip customization. It uses a function to compute the 90% confidence interval of the mean, displaying the derived statistics in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (CLASS) are highlighted upon mouse hover.\n\n\n\n\n\n\nNote: The default value of the hover css is hover_css = “fill:orange;”.\n\n\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) are highlighted upon mouse over.\n\n\n\n\n\n\nNote: In this example the ccs customisation request are encoded directly.\n\n\n3.6.5 Combining tooltip and hover effect\nNow, we combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) are highlighted upon mouse over. At the same time, the tooltip shows the CLASS.\n\n\n\n\n\n\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views can be seen in the data visualisation below.\n\n\n\n\n\n\nWhen selecting a data point in one dotplot, the corresponding ID is highlighted in the second visualization.\nTo achieve coordinated multiple views, the following approach is used:\n\nAppropriate ggiraph interactive functions create multiple interactive views.\npatchwork (from the patchwork package) is used inside girafe() to link the coordinated multiple views interactively.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library creates interactive web graphics from ggplot2 or a custom interface to plotly.js(MIT-licensed). Unlike other Plotly platforms, plotly.R is free and open-source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below is a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nInteractive: click on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n3.7.4 Coordinated Multiple Views with plotly\nCreating a coordinated linked plot using plotly involves three steps:\n\nUse highlight_key() of plotly package to define shared data.\nCreate two ggplot2 scatterplots.\nUse subplot() of plotly package to arrange them side by side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nTo learn: highlight_key() simply creates an object of class crosstalk::SharedData."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an htmlwidgets add-on that enables cross-widget interactions, such as linked brushing and filtering, by providing classes, functions, and conventions.\n\n3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.9 Reference",
    "text": "3.9 Reference\n\n3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\n\n3.2.1 Loading the R packages\nFirst, we write the code to check, install and load the following R packages:\n\nplotly, for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n3.2.2 Importing the data\nIn this exercise, we import the Data worksheet from the GlobalPopulation Excel workbook and use the appropriate package from tidyverse to load the worksheet.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn -\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nmutate_each_() was deprecated in dplyr 0.7.0, and funs() was deprecated in dplyr 0.8.0. As a result, we’ll use mutate_at() instead.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nEven, across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.3 Animated Data Visualisation: gganimate methods",
    "text": "3.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 by adding classes that define animations over time:\n\ntransition_*(): Spreads data over time and sets relationships.\nview_*(): Adjusts positional scales during animation.\nshadow_*(): Determines how past or future data is displayed.\nenter_*()/exit_*(): Manages how data appears or disappears.\nease_aes(): Controls the easing of aesthetics during transitions.\n\n\n3.3.1 Building a static population bubble plot\nThe basic ggplot2 functions are used to create a static bubble plot in the code chunk below.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n3.3.2 Building the animated bubble plot\nIn the code chunk below:\n\ntransition_time(): Creates transitions through distinct states in time (e.g., Year).\nease_aes(): Controls how aesthetics transition. Default is linear, with other options like quadratic, cubic, sine, circular, elastic, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart -"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.4 Animated Data Visualisation: plotly",
    "text": "3.4 Animated Data Visualisation: plotly\nIn Plotly’s R package, ggplotly() and plot_ly() support animations via the frame argument. They also offer an ids argument to ensure smooth transitions between objects sharing the same id, maintaining object constancy.\n\n3.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we create an animated bubble plot using ggplotly() \n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nAlthough show.legend = FALSE was used, the legend still appears. To fix this, use theme(legend.position='none'), as shown in the code below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we will create an animated bubble plot using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.5 Reference",
    "text": "3.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a story, animated graphics capture attention and leave a strong impression. In this exercise, we’ll use gganimate and plotly to create animated visualizations, while also reshaping data with tidyr and transforming it with dplyr.\n\n\nAnimations are created by generating multiple static plots, each reflecting a subset of the data. When these plots are combined, they form frames that appear to move, similar to a flipbook or cartoon.\n\n\n\n\nBefore creating an animated statistical graph, it’s helpful to understand some key concepts -\n\nFrame: In an animated line graph, each frame represents a moment in time or a category. When the frame changes, the data points update to reflect new information.\nAnimation Attributes: These are settings that control how the animation plays such as frame duration, easing functions, and whether it starts at the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a story, animated graphics capture attention and leave a strong impression. In this exercise, we’ll use gganimate and plotly to create animated visualizations, while also reshaping data with tidyr and transforming it with dplyr.\n\n\nAnimations are created by generating multiple static plots, each reflecting a subset of the data. When these plots are combined, they form frames that appear to move, similar to a flipbook or cartoon.\n\n\n\n\nBefore creating an animated statistical graph, it’s helpful to understand some key concepts -\n\nFrame: In an animated line graph, each frame represents a moment in time or a category. When the frame changes, the data points update to reflect new information.\nAnimation Attributes: These are settings that control how the animation plays such as frame duration, easing functions, and whether it starts at the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#installing-and-loading-the-packages",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.2.1 Installing and loading the packages",
    "text": "4.2.1 Installing and loading the packages\nThis exercise uses the following R packages:\n\nggridges: For ridgeline plots (ggplot2 extension)\nggdist: For visualizing distribution and uncertainty\ntidyverse: For modern data science and visualization\nggthemes: For additional themes, scales, and geoms in ggplot\ncolorspace: For color selection and manipulation in visualizations\n\nThe code chunk below loads these packages into the RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#data-import",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.2.2 Data import",
    "text": "4.2.2 Data import\nFor this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.1 Plotting ridgeline graph: ggridges method",
    "text": "4.3.1 Plotting ridgeline graph: ggridges method\nThere are multiple ways to create ridgeline plots in R. This section covers using the ggridges package, which provides two main geoms: geom_ridgeline() (uses height values directly) and geom_density_ridges()(estimates densities before plotting). The example below uses geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.2 Varying fill colors along the x axis",
    "text": "4.3.2 Varying fill colors along the x axis\nTo create ridgeline plots with varying fill colors along the x-axis, use  geom_ridgeline_gradient() or geom_density_ridges_gradient(). These function like their non-gradient counterparts but allow color variation instead of a solid fill. However, they do not support alpha transparency due to technical limitations.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.3 Mapping the probabilities directly onto colour",
    "text": "4.3.3 Mapping the probabilities directly onto colour\nIn addition to extra geom objects for ridgeline plots, the ggridges package offers stat_density_ridges() that replaces stat_density() in ggplot2. The figure below maps probabilities using stat(ecdf), representing the empirical cumulative density function for English\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.4 Ridgeline plots with quantile lines",
    "text": "4.3.4 Ridgeline plots with quantile lines\nUsing geom_density_ridges_gradient(), we can color the ridgeline plot by quantile with the stat(quantile) aesthetic, as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using numbers to define quantiles, we can specify quantiles by cut points, such as the 2.5% and 97.5% tails, to color the ridgeline plot, as shown below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-a-half-eye-graph",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.1 Plotting a Half Eye graph",
    "text": "4.4.1 Plotting a Half Eye graph\nWe plot a Half-Eye graph by using stat_halfeye() of ggdist package. This produces a Half Eye visualization, which contains a half-density and a slab-interval.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.4.2 Adding the boxplot with geom_boxplot()\nNext, we add a second geometry layer using ggplot2’s geom_boxplot(), which creates a narrower boxplot. The width is reduced and the opacity adjusted.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.4.3 Adding the Dot Plots with stat_dots()\nNext, we add the third geometry layer using ggdist’s stat_dots(), which creates a half-dotplot similar to a histogram. The side = “left” argument places it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#finishing-touch",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.4 Finishing touch",
    "text": "4.4.4 Finishing touch\nFinally, coord_flip() from ggplot2 flips the raincloud chart horizontally for the raincloud effect, while theme_economist() from ggthemes gives it a polished, professional look.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "",
    "text": "Visualizing distribution is a common practice in statistical analysis. We already explored methods like histograms, PDFs, boxplots, notch plots, and violin plots using ggplot2. This chapter introduces two newer techniques—ridgeline and raincloud plots—using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#installing-and-launching-r-packages",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.1 Installing and launching R packages",
    "text": "4.3.1 Installing and launching R packages\nWe will use ggstatsplot and tidyverse for this exercise.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-data",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.2 Importing data",
    "text": "4.3.2 Importing data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.3 One-sample test: gghistostats() method",
    "text": "4.3.3 One-sample test: gghistostats() method\n gghistostats() is used to to build a visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#unpacking-the-bayes-factor",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.4 Unpacking the Bayes Factor",
    "text": "4.3.4 Unpacking the Bayes Factor\nA Bayes factor is the ratio of the likelihood of one hypothesis to another, indicating the strength of evidence for one theory over another. It helps evaluate data in support of a null hypothesis (H0) versus an alternative hypothesis (H1). The Bayes factor, often denoted as B10, mathematically compares the two hypotheses."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.5 How to interpret Bayes Factor",
    "text": "4.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. A common interpretation, proposed by Harold Jeffreys (1961) and modified by Lee and Wagenmakers (2013), is as follows:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.6 Two-sample mean test: ggbetweenstats()",
    "text": "4.3.6 Two-sample mean test: ggbetweenstats()\nggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "4.3.7 Oneway ANOVA Test: ggbetweenstats() method\n ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n4.3.7.1 ggbetweenstats - Summary of tests"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "4.3.8 Significant Test of Correlation: ggscatterstats()\n ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "4.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\n the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-excel-file-readxl-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-excel-file-readxl-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.1 Importing Excel file: readxl methods",
    "text": "4.6.1 Importing Excel file: readxl methods\nWe use read_xls() of readxl package to import the data worksheet of ToyotaCorolla.xls workbook into R\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#multiple-regression-model-using-lm",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.2 Multiple Regression Model using lm()",
    "text": "4.6.2 Multiple Regression Model using lm()\nWe calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.3 Model Diagnostic: checking for multicolinearity:",
    "text": "4.6.3 Model Diagnostic: checking for multicolinearity:\nTo check multicolinearity - we use check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.4 Model Diagnostic: checking normality assumption",
    "text": "4.6.4 Model Diagnostic: checking normality assumption\n check_normality() of performance package is used for normality assumption.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.5 Model Diagnostic: Check model for homogeneity of variances",
    "text": "4.6.5 Model Diagnostic: Check model for homogeneity of variances\n check_heteroscedasticity() of performance package is used to check for homogeneity of variances\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-complete-check",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.6 Model Diagnostic: Complete check",
    "text": "4.6.6 Model Diagnostic: Complete check\nWe can also do the complete check using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.7 Visualising Regression Parameters: see methods",
    "text": "4.6.7 Visualising Regression Parameters: see methods\nplot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.8 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "4.6.8 Visualising Regression Parameters: ggcoefstats() methods\n ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-and-loading-the-packages",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.2.1 Installing and loading the packages",
    "text": "4.2.1 Installing and loading the packages\nThis exercise will use the following R packages:\n\ntidyverse: A collection of packages for data science\nplotly: For interactive plots\ngganimate: For animation plots\nDT: For interactive HTML tables\ncrosstalk: For cross-widget interactions (e.g., linked brushing and filtering)\nggdist: For visualizing distribution and uncertainty\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#data-import",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.2.2 Data import",
    "text": "4.2.2 Data import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.3.1 Plotting standard error bars of point estimates",
    "text": "4.3.1 Plotting standard error bars of point estimates\nNow, we plot the standard error bars of mean maths score by race\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.3.2 Plotting confidence interval of point estimates",
    "text": "4.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this part, we plot interactive error bars for the 99% confidence interval of mean maths score by race\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nUsing  stat_pointinterval() of ggdist , we build a visual for displaying distribution of maths scores by race\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nstat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-ungeviz-package",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.5.1 Installing ungeviz package",
    "text": "4.5.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#launch-the-application-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#launch-the-application-in-r",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.5.2 Launch the application in R",
    "text": "4.5.2 Launch the application in R\n\nlibrary(ungeviz)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "4.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nThe code chunk below is used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.4.1 FunnelPlotR methods: The basic plot",
    "text": "4.4.1 FunnelPlotR methods: The basic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThe funnel plot has 267 points, with 0 outliers, and is adjusted for overdispersion. Key points:\n\ngroup defines the level of points (e.g., Sub-district, District, or City).\nFor Cityc, there are only 6 data points.\nBy default, data_type is set to “SR”.\nlimit defines plot limits (95 or 99), representing 95% or 99.8% quantiles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.4.2 FunnelPlotR methods: Makeover 1",
    "text": "4.4.2 FunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThe funnel plot has 267 points, with 7 outliers, and is adjusted for overdispersion. Key points:\n\ndata_type changes from the default “SR” to “PR” (proportions).\nxrange and yrange set the x-axis and y-axis ranges."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.4.3 FunnelPlotR methods: Makeover 2",
    "text": "4.4.3 FunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThe funnel plot has 267 points, with 7 outliers, and is adjusted for overdispersion. Key points:\n\nlabel = NA removes the default outlier labels.\ntitle adds the plot title.\nx_label and y_label modify the x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#computing-the-basic-derived-fields",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.1 Computing the basic derived fields",
    "text": "4.5.1 Computing the basic derived fields\nTo plot the funnel plot, we first need to calculate the cumulative death rate and its standard error.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nNow, we compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.3 Plotting a static funnel plot",
    "text": "4.5.3 Plotting a static funnel plot\nWe use ggplot2 functions to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "4.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plots are used for unbiased comparisons between outlets or business entities. In this exercise, we will - plot funnel plots with the funnelPlotR package, create static funnel plots using ggplot2, create interactive funnel plots with plotly and ggplot2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "",
    "text": "In this chapter, we will visualize uncertainty through statistical graphics. By the end, we will -\n\nPlot error bars with ggplot2\nCreate interactive error bars using ggplot2, plotly, and DT\nMake advanced plots with ggdist\nCreate hypothetical outcome plots (HOPs) using the ungeviz package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "",
    "text": "In this exercise, you will use:\n\nggstatsplot for creating visual graphics with statistical information,\nperformance for model diagnostics, and\nparameters for visualizing model parameters."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#the-data",
    "title": "Hands-on Ex 5.1 - Creating Ternary Plot with R",
    "section": "5.3.1 The data",
    "text": "5.3.1 The data\nThis exercise uses the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 dataset. The CSV file, respopagsex2000to2018_tidy.csv, is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#importing-data",
    "title": "Hands-on Ex 5.1 - Creating Ternary Plot with R",
    "section": "5.3.2 Importing Data",
    "text": "5.3.2 Importing Data\nread_csv() function of readr package will be used to import the csv file.\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#preparing-the-data",
    "title": "Hands-on Ex 5.1 - Creating Ternary Plot with R",
    "section": "5.3.3 Preparing the Data",
    "text": "5.3.3 Preparing the Data\nWe use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#plotting-a-static-ternary-diagram",
    "title": "Hands-on Ex 5.1 - Creating Ternary Plot with R",
    "section": "5.4.1 Plotting a static ternary diagram",
    "text": "5.4.1 Plotting a static ternary diagram\nUsing ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#plotting-an-interative-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html#plotting-an-interative-ternary-diagram",
    "title": "Hands-on Ex 5.1 - Creating Ternary Plot with R",
    "section": "5.4.2 Plotting an interative ternary diagram",
    "text": "5.4.2 Plotting an interative ternary diagram\nCreating an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#installing-and-loading-the-packages",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#installing-and-loading-the-packages",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "pacman::p_load(tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#data-import",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#data-import",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#boxplot",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#boxplot",
    "title": "In-class Exercise 4",
    "section": "2.1 Boxplot",
    "text": "2.1 Boxplot\n\nggplot(data=exam_data, \n       aes(x = ENGLISH,       \n           y= CLASS)) +    \n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#importing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#importing-the-data-set",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.3.1 Importing the data set",
    "text": "5.3.1 Importing the data set\nread_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R dataframe format.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#data-wrangling-and-manipulation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#data-wrangling-and-manipulation",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.3.2 Data Wrangling and Manipulation",
    "text": "5.3.2 Data Wrangling and Manipulation\nThe realis2018 dataset is highly disaggregated and not suitable for treemap visualization. To prepare it, we will:\n\nGroup transaction records by Project Name, Planning Region, Planning Area, Property Type, and Type of Sale.\nSummarize key metrics:\n\nTotal Units Sold (sum of No. of Units)\nTotal Area (sum of Area (sqm))\nMedian Unit Price (Unit Price ($ psm))\nMedian Transacted Price (Transacted Price ($))\n\n\nThe dplyr functions group_by() and summarize() will be used:\n\ngroup_by() organizes data into groups for analysis.\nsummarize() computes summary statistics for each group."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#grouped-summaries-without-the-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#grouped-summaries-without-the-pipe",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.3.3 Grouped summaries without the Pipe",
    "text": "5.3.3 Grouped summaries without the Pipe\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#grouped-summaries-with-the-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#grouped-summaries-with-the-pipe",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.3.4 Grouped summaries with the pipe",
    "text": "5.3.4 Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#designing-a-static-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#designing-a-static-treemap",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.1 Designing a static treemap",
    "text": "5.4.1 Designing a static treemap\nIn this section, treemap() from the Treemap package is used to visualize the distribution of median unit prices and total units sold for resale condominiums by geographic hierarchy in 2017.\nFirst, we filter resale condominium records from the realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#using-the-basic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#using-the-basic-arguments",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.2 Using the basic arguments",
    "text": "5.4.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nKey Takeaways from the Three Arguments:\n\nindex:\n\nMust include at least two column names to create a hierarchical treemap.\nThe first column represents the highest aggregation level, followed by the next levels.\n\nvSize:\n\nThe specified column must not contain negative values as it determines the size of rectangles in the treemap.\n\n\n\n\nWarning:\n\nThe treemap above is incorrectly colored because it does not represent median unit prices with varying color intensities.\nTo fix this, use vColor along with type to define color mapping.\nBy default, type = index, meaning colors represent planning area hierarchy instead of median prices."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#working-with-vcolor-and-type-arguments",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.3 Working with vColor and type arguments",
    "text": "5.4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThinking to learn from the code chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#colours-in-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#colours-in-treemap-package",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.4 Colours in treemap package",
    "text": "5.4.4 Colours in treemap package\nThe mapping and palette arguments control how colors are applied in a treemap. The main difference between “value” and “manual” lies in their default mapping approach. When using “value,” the treemap assumes a diverging color palette, such as ColorBrewer’s “RdYlBu,” where 0 is assigned to the middle color (often white or yellow), the most negative value (-max(abs(values))) is mapped to the left-end color, and the most positive value (max(abs(values))) is mapped to the right-end color. In contrast, the “manual” option directly assigns the minimum value to the left-end color, the maximum value to the right-end color, and the midpoint of the range to the middle color."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#the-value-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#the-value-type-treemap",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.5 The “value” type treemap",
    "text": "5.4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#the-manual-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#the-manual-type-treemap",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.6 The “manual” type treemap",
    "text": "5.4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#treemap-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#treemap-layout",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.7 Treemap Layout",
    "text": "5.4.7 Treemap Layout\nThe treemap() function supports two widely used treemap layouts: “squarified” and “pivotSize,” with “pivotSize” set as the default. The squarified algorithm (Bruls et al., 2000) focuses on creating rectangles with balanced aspect ratios but does not preserve the sorting order (sortID). In contrast, the pivot-by-size algorithm (Bederson et al., 2002) maintains the specified sorting order while still achieving reasonably proportioned rectangles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#working-with-algorithm-argument",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#working-with-algorithm-argument",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.8 Working with algorithm argument",
    "text": "5.4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#using-sortid",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#using-sortid",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.4.9 Using sortID",
    "text": "5.4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#designing-a-basic-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#designing-a-basic-treemap",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.5.1 Designing a basic treemap",
    "text": "5.5.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#defining-hierarchy",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#defining-hierarchy",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.5.2 Defining hierarchy",
    "text": "5.5.2 Defining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#installing-d3treer-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#installing-d3treer-package",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.6.1 Installing d3treeR package",
    "text": "5.6.1 Installing d3treeR package\nWe will load the devtools library and install the package found in github by using the codes below.\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\nNow launch d3treeR package\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#designing-an-interactive-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html#designing-an-interactive-treemap",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "5.6.2 Designing An Interactive Treemap",
    "text": "5.6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#importing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#importing-the-data-set",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.3.1 Importing the data set",
    "text": "5.3.1 Importing the data set\nread_csv() of readr is used to import WHData-2018.csv into R.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#preparing-the-data",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.3.2 Preparing the data",
    "text": "5.3.2 Preparing the data\nWe change the row number by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#transforming-the-data-frame-into-a-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#transforming-the-data-frame-into-a-matrix",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.3.3 Transforming the data frame into a matrix",
    "text": "5.3.3 Transforming the data frame into a matrix\nThe data is initially loaded as a data frame but needs to be converted into a data matrix for heatmap creation.\nThe following code will transform the wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#heatmap-of-r-stats",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#heatmap-of-r-stats",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.4.1 heatmap() of R Stats",
    "text": "5.4.1 heatmap() of R Stats\nWe plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNote - By default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\nTo plot a cluster heatmap, we just have to use the default -\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nNote: The order of rows and columns differs from the original wh_matrix because heatmap() applies clustering, calculating distances between rows and columns to group similar ones. Dendrograms are displayed alongside the heatmap.\nColor Interpretation: Red cells indicate small values, while larger values appear in a different shade.\nIssue: The Happiness Score has relatively high values, making other variables with smaller values appear indistinguishable.\nSolution: Normalization is needed to balance the data. This can be done using the scale argument, applied either row-wise or column-wise.\nThe following code chunk normalizes the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNow, the values are scaled, making the heatmap more informative.\n\nThe margins argument ensures that x-axis labels are fully visible.\nThe cexRow and cexCol arguments control the font size for y-axis and x-axis labels, respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#working-with-heatmaply",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.1 Working with heatmaply",
    "text": "5.5.1 Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\nNote:\n\nUnlike heatmap(), heatmaply() places the horizontal dendrogram on the left side of the heatmap.\nRow labels appear on the right side.\nIf x-axis labels are too long, they are automatically rotated 135 degrees for better readability."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#data-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#data-transformation",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.2 Data transformation",
    "text": "5.5.2 Data transformation\nWhen analyzing multivariate data, variables often have different measurement scales. To make them comparable, data transformation is commonly applied before clustering.\nheatmaply() supports three main transformation methods: scale, normalize and percentise.\n\n5.5.2.1 Scaling method\n\nWhen variables follow or are assumed to follow a normal distribution, scaling (subtracting the mean and dividing by the standard deviation) standardizes them to a normal distribution.\nThis transformation expresses each value as its distance from the mean in standard deviation units.\nIn heatmaply(), the scale argument allows scaling by columns or rows.\n\nThe following code chunk demonstrates column-wise scaling.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n5.5.2.2 Normalising method\n\nWhen variables come from different or non-normal distributions, normalization rescales them to a 0 to 1 range by subtracting the minimum and dividing by the maximum value.\nThis method preserves each variable’s distribution while making them comparable on the same scale.\n\nUnlike scaling, normalization is applied directly to the input dataset (e.g., wh_matrix), as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n5.5.2.3 Percentising method\n\nThis method is similar to ranking variables but, instead of keeping rank values, it divides them by the maximum rank.\nIt uses the empirical cumulative distribution function (ECDF) to transform values into their empirical percentiles.\nThe advantage of percentizing is that each value represents the percentage of observations that are equal to or below it.\n\nLike normalization, the percentize method is applied directly to the input dataset (e.g., wh_matrix), as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#clustering-algorithm",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.3 Clustering algorithm",
    "text": "5.5.3 Clustering algorithm\nheatmaply supports various hierarchical clustering algorithms through key arguments:\n\ndistfun: Computes distance (dissimilarity) between rows/columns. Defaults to dist. Supports correlation-based clustering (“pearson”, “spearman”, “kendall”) using as.dist(1 - cor(t(x))).\nhclustfun: Defines the hierarchical clustering function, defaulting to hclust.\ndist_method: Defaults to “euclidean” but supports alternatives like “manhattan”, “canberra”, “binary”, and “minkowski”.\nhclust_method: Defaults to “complete”, but can be “ward.D”, “ward.D2”, “single”, “average”, “mcquitty”, “median”, or “centroid”.\n\nClustering models can be fine-tuned manually or statistically."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#manual-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#manual-approach",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.4 Manual approach",
    "text": "5.5.4 Manual approach\nThe heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#statistical-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#statistical-approach",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.5 Statistical approach",
    "text": "5.5.5 Statistical approach\nTo determine the optimal clustering method and number of clusters, the dendextend package provides:\n\ndend_expend(): Helps identify the most suitable clustering method.\nfind_k(): Determines the optimal number of clusters.\n\nFirst, dend_expend() will be used to recommend the best clustering method.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#seriation",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.6 Seriation",
    "text": "5.5.6 Seriation\nOne limitation of hierarchical clustering is that it doesn’t enforce a strict row order; it only constrains possible arrangements. For example, if clustering results in ((A+B)+C), it ensures C won’t be between A and B but doesn’t dictate if the order should be ABC or BAC.\nTo address this, heatmaply leverages the seriation package to optimize row and column ordering. It minimizes the sum of distances between adjacent leaves in the dendrogram, similar to solving a restricted traveling salesman problem.\nA key seriation algorithm used is Optimal Leaf Ordering (OLO). It refines hierarchical clustering results by rotating branches to minimize adjacent dissimilarities, producing a clearer heatmap.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#working-with-colour-palettes",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.7 Working with colour palettes",
    "text": "5.5.7 Working with colour palettes\nBy default, heatmaply uses the viridis color palette. However, users can customize the color scheme to enhance aesthetics and readability.\nIn the code snippet below, the Blues palette from the RColorBrewer package is applied to modify the heatmap’s appearance.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html#the-finishing-touch",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.8 The finishing touch",
    "text": "5.5.8 The finishing touch\nBesides offering a variety of arguments for statistical analysis, heatmaply also provides features to enhance the visual quality of heatmaps.\nIn the code snippet below, the following arguments are used:\n\nk_row: Creates 5 row clusters.\nmargins: Adjusts the top margin to 60 and row margin to 200.\nfontsize_row & fontsize_col: Sets row and column label font size to 4.\nmain: Defines the main title.\nxlab & ylab: Adds axis labels.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#importing-data",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.3.1 Importing Data",
    "text": "5.3.1 Importing Data\nFirst, we import the data into R by using read_csv() of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nBeside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#building-a-basic-correlation-matrix",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.4.1 Building a basic correlation matrix",
    "text": "5.4.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe pairs() function requires a matrix or data frame as input. Creating a scatterplot matrix with pairs() is straightforward, using its default settings. In this case, columns 2 to 12 of the wine data frame are selected to generate the scatterplot matrix. These columns represent key variables such as fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, and alcohol.\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#drawing-the-lower-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#drawing-the-lower-corner",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.4.2 Drawing the lower corner",
    "text": "5.4.2 Drawing the lower corner\nThe pairs() function in R Graphics offers various customization options. One common practice is to display only the upper or lower half of the correlation matrix since it is symmetric. To show only the lower half, the upper.panel argument is used, as demonstrated in the code snippet below. This helps reduce redundancy and makes the visualization more readable.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chunk below.\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#including-with-correlation-coefficients",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.4.3 Including with correlation coefficients",
    "text": "5.4.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#the-basic-plot",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.5.1 The basic plot",
    "text": "5.5.1 The basic plot\nOne of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nKey takeaways from the code chunk above:\n\nThe cor.vars argument is used to compute the correlation matrix, which serves as the foundation for the corrgram.\nThe ggcorrplot.args argument allows for additional (mainly aesthetic) customizations that will be passed to the ggcorrplot::ggcorrplot function. However, certain arguments—such as corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, and digits—should be avoided, as they are already internally handled.\n\nA sample sub-code chunk can be used to fine-tune specific elements of the plot, such as adjusting the font size for the x-axis, y-axis, and statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#getting-started-with-corrplot",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.7.1 Getting started with corrplot",
    "text": "5.7.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nBy default, the corrgram is visualized using circles within a symmetric matrix layout. The color scheme follows a diverging blue-red gradient, where blue represents positive correlations and red indicates negative correlations. The intensity or saturation of the color reflects the strength of the correlation coefficient—darker shades signify a stronger linear relationship between variables, while lighter shades indicate a weaker correlation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#working-with-visual-geometrics",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.7.2 Working with visual geometrics",
    "text": "5.7.2 Working with visual geometrics\nThe corrplot package offers seven different geometric representations (specified via the method parameter) to visually encode correlation values: circle, square, ellipse, number, shade, color, and pie. By default, the circle method is used. However, this can be modified using the method argument, as demonstrated in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#working-with-layout",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.7.3 Working with layout",
    "text": "5.7.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#working-with-mixed-layout",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.7.4 Working with mixed layout",
    "text": "5.7.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nHere, the lower and upper arguments define the visualization methods for different halves of the corrgram. In this case, ellipses represent the lower half, while numerical values map the upper half. The tl.pos argument controls the placement of axis labels, and the diag argument specifies the glyph used along the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.7.5 Combining corrgram with the significant test",
    "text": "5.7.5 Combining corrgram with the significant test\nIn statistical analysis, it is important to determine which pairs of variables have correlation coefficients that are statistically significant. The figure below presents a corrgram combined with significance testing, highlighting that not all correlation pairs are statistically significant. For instance, the correlation between total sulfur dioxide and free sulfur dioxide is significant at a 0.1 significance level, whereas the correlation between total sulfur dioxide and citric acid is not.\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#reorder-a-corrgram",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.7.6 Reorder a corrgram",
    "text": "5.7.6 Reorder a corrgram\nReordering the matrix in a corrgram is crucial for uncovering hidden structures and patterns. By default, the attributes in a corrgram are arranged according to the original correlation matrix. However, this default setting can be modified using the order argument in corrplot(). The corrplot package supports four ordering methods:\n\n“AOE” (Angular Order of the Eigenvectors): This method orders variables based on their eigenvectors, as described by Michael Friendly (2002).\n“FPC” (First Principal Component): Variables are ordered based on the first principal component.\n“hclust” (Hierarchical Clustering): Groups similar variables together based on a clustering algorithm. The agglomeration method can be specified using hclust.method, which supports options such as “ward”, “single”, “complete”, “average”, “mcquitty”, “median”, or “centroid”.\n“alphabet”: Orders variables alphabetically.\n\nAdditional ordering algorithms can be found in the seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.7.7 Reordering a correlation matrix using hclust",
    "text": "5.7.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html#r-packages",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "5.8.1 R packages",
    "text": "5.8.1 R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#plotting-a-simple-parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#plotting-a-simple-parallel-coordinates",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.1 Plotting a simple parallel coordinates",
    "text": "5.4.1 Plotting a simple parallel coordinates\nCode chunk below is used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nHere, only two arguments are used: data specifies the data object (i.e., wh) and columns selects the variables for creating the parallel coordinates plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.2 Plotting a parallel coordinates with boxplot",
    "text": "5.4.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates plot does not provide meaningful insights into the World Happiness measures. This section will demonstrate how to enhance the plot using various arguments available in ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\nKey Takeaways from the Code Chunk:\n\ngroupColumn: Groups observations (parallel lines) based on a single variable (e.g., Region) and assigns colors accordingly.\nscale: Applies the uniminmax method to scale each variable between 0 and 1.\nalphaLines: Adjusts line transparency to 0.2 (range: 0 to 1) for better readability.\nboxplot: Enables boxplots within the parallel coordinates plot when set to TRUE (default is FALSE).\ntitle: Adds a descriptive title to the plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#parallel-coordinates-with-facet",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.3 Parallel coordinates with facet",
    "text": "5.4.3 Parallel coordinates with facet\nSince ggparcoord() is built on ggplot2, we can integrate ggplot2 functions to enhance the parallel coordinates plot.\nIn the code chunk below, facet_wrap() is used to create 10 small multiple parallel coordinate plots, each representing a different geographical region (e.g., East Asia). This allows for a more detailed comparison across regions.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#rotating-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#rotating-x-axis-text-label",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.4 Rotating x-axis text label",
    "text": "5.4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.5 Adjusting the rotated x-axis text label",
    "text": "5.4.5 Adjusting the rotated x-axis text label\nRotating x-axis labels to 30 degrees can cause overlap with the plot. To prevent this, we can adjust the horizontal justification (hjust) within element_text() inside the theme() function.\nBy applying axis.text.x = element_text(angle = 30, hjust = 1), we ensure that the labels remain readable without interfering with the plot.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#the-basic-plot",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.5.1 The basic plot",
    "text": "5.5.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#rotate-axis-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#rotate-axis-label",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.5.2 Rotate axis label",
    "text": "5.5.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#changing-the-colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#changing-the-colour-scheme",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.5.3 Changing the colour scheme",
    "text": "5.5.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunk below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.5.4 Parallel coordinates plot with histogram",
    "text": "5.5.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.1.html",
    "title": "Hands-on Ex 5.1 - Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots visualize the distribution of three-part compositional data, such as population structure or soil composition, using a triangular diagram scaled from 0 to 1. Points are positioned based on their component values. In this hands-on, we will create ternary plots in R to analyze Singapore’s population structure through four steps:\n\nInstall and load tidyverse and ggtern.\nCompute three measures using mutate() from dplyr.\nCreate a static ternary plot with ggtern().\nBuild an interactive ternary plot using plot_ly() from Plotly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.3.html",
    "title": "Hands-on Ex 5.3 - Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps use color variations to represent data, making them effective for analyzing multivariate data in a tabular format. By arranging variables in columns and observations in rows, they highlight patterns, similarities, and correlations.\nIn this hands-on exercise, we create both static and interactive heatmaps in R for visualizing and analyzing complex data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.4.html",
    "title": "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "A parallel coordinates plot is a visualization technique for exploring multivariate numerical data, ideal for comparing multiple variables and identifying relationships—such as factors influencing the Happiness Index. Developed by Alfred Inselberg in the 1970s, it is widely used in academic and scientific fields rather than business settings.\nAs noted by Stephen Few (2006), this chart is best suited for interactive analysis rather than general presentation, helping uncover meaningful multivariate patterns. It is particularly useful in tasks like customer segmentation to characterize detected clusters.\nIn this hands-on exercise, we will :\n\nCreate static parallel coordinates plots using ggparcoord() from the GGally package.\nBuild interactive parallel coordinates plots with the parcoords package.\nUse the parallelPlot package for interactive visualization."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.5.html",
    "title": "Hands-on Ex 5.5 - Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will create treemaps using R. You will first manipulate transaction data into a treemap structure using functions from the dplyr package. Then, you will plot a static treemap using the treemap package. Finally, you will design an interactive treemap using the d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.2.html",
    "title": "Hands-on Ex 5.2 - Visual Correlation Analysis",
    "section": "",
    "text": "The correlation coefficient is a widely used statistic for measuring both the strength and type of relationship between two variables. Its values range from -1.0 to 1.0, where a coefficient of 1 indicates a perfect linear relationship, -1.0 signifies a perfect inverse relationship, and 0.0 suggests no linear correlation between the variables.\nWhen dealing with multivariate data, correlation coefficients for all pairwise comparisons are typically displayed in a table format known as a correlation matrix or scatterplot matrix.\nThere are three primary reasons for computing a correlation matrix:\n\nTo examine relationships between high-dimensional variables on a pairwise basis.\nTo serve as an input for other statistical analyses, such as exploratory factor analysis, confirmatory factor analysis, structural equation modeling, and linear regression, particularly when handling missing values pairwise.\nTo act as a diagnostic tool in other analyses. For instance, in linear regression, a high degree of correlation among variables may indicate unreliable estimates.\n\nFor large datasets with numerous observations and variables, a corrgram is often used to visually analyze and explore relationships among variables. The design of a corrgram is based on two key principles:\n\nRepresenting the sign and magnitude of correlations through visual elements.\nReordering variables in the correlation matrix so that similar variables are placed next to each other, making patterns easier to identify.\n\nThis hands-on exercise will guide you through visualizing correlation matrices in R. It consists of three sections: creating a correlation matrix using pairs() from R Graphics, plotting a corrgram with the corrplot package, and generating an interactive correlation matrix using the plotly package in R."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-packages",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\nThe R packages used in this take-home exercise are:\n\ntidyverse - (i.e. readr, tidyr, dplyr, ggplot2) A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nggthemes - Extra themes, geoms, and scales for ggplot2.\npatchwork - For preparing composite figure created using ggplot2.\nggridges - For ridgeline plots that create the impression of a mountain range. They can be useful for visualising changes in distributions over time or space.\nggdist - For visualisations of distributions and uncertainty.\nplotly - R library for plotting interactive statistical graphs.\ncorrplot. - A graphical display of a correlation matrix or general matrix.\n\nThe code chunk below uses the p_load() function in the pacman package to check if the packages are installed in the computer. If yes, they are then loaded into the R environment. If no, they are installed, and then loaded into the R environment.\n\npacman::p_load(tidyverse, ggthemes, patchwork, \n               ggridges, ggdist, plotly,\n               corrplot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-the-data",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "2.2 Import the data",
    "text": "2.2 Import the data\nThe dataset (data/Ship_Performance_Dataset.csv) used in the exercise is the Ship Performance in the Gulf of Guinea retrieved from kaggle - Ship Performance Clustering Dataset.\nThe code chunk below imports the CSV file into R environment by using read_csv() function of readr package as ship_data. \n\n#Reading the data into R environment\nship_data &lt;- read_csv(\"data/Ship_Performance_Dataset.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-for-duplicates",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-for-duplicates",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "3.1 Check for duplicates",
    "text": "3.1 Check for duplicates\nUsing the duplicated function, we see that there are no duplicate entries in the data.\n\nship_data[duplicated(ship_data),]\n\n# A tibble: 0 × 18\n# ℹ 18 variables: Date &lt;date&gt;, Ship_Type &lt;chr&gt;, Route_Type &lt;chr&gt;,\n#   Engine_Type &lt;chr&gt;, Maintenance_Status &lt;chr&gt;, Speed_Over_Ground_knots &lt;dbl&gt;,\n#   Engine_Power_kW &lt;dbl&gt;, Distance_Traveled_nm &lt;dbl&gt;, Draft_meters &lt;dbl&gt;,\n#   Weather_Condition &lt;chr&gt;, Cargo_Weight_tons &lt;dbl&gt;,\n#   Operational_Cost_USD &lt;dbl&gt;, Revenue_per_Voyage_USD &lt;dbl&gt;,\n#   Turnaround_Time_hours &lt;dbl&gt;, Efficiency_nm_per_kWh &lt;dbl&gt;,\n#   Seasonal_Impact_Score &lt;dbl&gt;, Weekly_Voyage_Count &lt;dbl&gt;, …"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-and-handle-missing-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#check-and-handle-missing-values",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "3.2 Check and handle missing values",
    "text": "3.2 Check and handle missing values\nWe run below code to check for missing values and no output is generated indicating no missing values.\n\nfor(column_name in names(ship_data)) {\n  na_count &lt;- sum(is.na(ship_data[[column_name]]))\n\n  if (na_count &gt; 0) {\n    message(\"Column '\", column_name, \"' has \", na_count, \" NA values.\")\n  }\n}\n\nNow, that we are done with the basic pre-processing steps, since we don’t want to further modify our dataset, we will start with the Exploratory Data Analysis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5 - Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "pacman::p_load(tidyverse, readxl, SmartEDA, \n               easystats, gtsummary, ggstatsplot)\n\n\n\n\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \"data\")\n\n\nglimpse(car_resale)\n\nRows: 1,436\nColumns: 38\n$ Id               &lt;dbl&gt; 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 45, 46, 47, 49, 51, 6…\n$ Model            &lt;chr&gt; \"TOYOTA Corolla 1.6 5drs 1 4/5-Doors\", \"TOYOTA Coroll…\n$ Price            &lt;dbl&gt; 18950, 13500, 13750, 13950, 14950, 13750, 12950, 1690…\n$ Age_08_04        &lt;dbl&gt; 25, 23, 23, 24, 26, 30, 32, 27, 30, 27, 22, 23, 27, 2…\n$ Mfg_Month        &lt;dbl&gt; 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 11, 10, 6, 11, 11, 11…\n$ Mfg_Year         &lt;dbl&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002,…\n$ KM               &lt;dbl&gt; 20019, 46986, 72937, 41711, 48000, 38500, 61000, 9461…\n$ Quarterly_Tax    &lt;dbl&gt; 100, 210, 210, 210, 210, 210, 210, 210, 210, 234, 234…\n$ Weight           &lt;dbl&gt; 1180, 1165, 1165, 1165, 1165, 1170, 1170, 1245, 1245,…\n$ Guarantee_Period &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ HP_Bin           &lt;chr&gt; \"100-120\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100…\n$ CC_bin           &lt;chr&gt; \"1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", …\n$ Doors            &lt;dbl&gt; 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3,…\n$ Gears            &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ Cylinders        &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ Fuel_Type        &lt;chr&gt; \"Petrol\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            &lt;chr&gt; \"Blue\", \"Blue\", \"Silver\", \"Blue\", \"Black\", \"Black\", \"…\n$ Met_Color        &lt;dbl&gt; 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,…\n$ Automatic        &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mfr_Guarantee    &lt;dbl&gt; 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,…\n$ BOVAG_Guarantee  &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ ABS              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_1         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_2         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airco            &lt;dbl&gt; 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Automatic_airco  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,…\n$ Boardcomputer    &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ CD_Player        &lt;dbl&gt; 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,…\n$ Central_Lock     &lt;dbl&gt; 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Powered_Windows  &lt;dbl&gt; 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Power_Steering   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Radio            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mistlamps        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Sport_Model      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,…\n$ Backseat_Divider &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Metallic_Rim     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Radio_cassette   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Tow_Bar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nlist(car_resale)\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\nsummary(car_resale)\n\n       Id            Model               Price         Age_08_04    \n Min.   :   1.0   Length:1436        Min.   : 4350   Min.   : 1.00  \n 1st Qu.: 361.8   Class :character   1st Qu.: 8450   1st Qu.:44.00  \n Median : 721.5   Mode  :character   Median : 9900   Median :61.00  \n Mean   : 721.6                      Mean   :10731   Mean   :55.95  \n 3rd Qu.:1081.2                      3rd Qu.:11950   3rd Qu.:70.00  \n Max.   :1442.0                      Max.   :32500   Max.   :80.00  \n   Mfg_Month         Mfg_Year          KM         Quarterly_Tax   \n Min.   : 1.000   Min.   :1998   Min.   :     1   Min.   : 19.00  \n 1st Qu.: 3.000   1st Qu.:1998   1st Qu.: 43000   1st Qu.: 69.00  \n Median : 5.000   Median :1999   Median : 63390   Median : 85.00  \n Mean   : 5.549   Mean   :2000   Mean   : 68533   Mean   : 87.12  \n 3rd Qu.: 8.000   3rd Qu.:2001   3rd Qu.: 87021   3rd Qu.: 85.00  \n Max.   :12.000   Max.   :2004   Max.   :243000   Max.   :283.00  \n     Weight     Guarantee_Period    HP_Bin             CC_bin         \n Min.   :1000   Min.   : 3.000   Length:1436        Length:1436       \n 1st Qu.:1040   1st Qu.: 3.000   Class :character   Class :character  \n Median :1070   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :1072   Mean   : 3.815                                        \n 3rd Qu.:1085   3rd Qu.: 3.000                                        \n Max.   :1615   Max.   :36.000                                        \n     Doors           Gears         Cylinders  Fuel_Type        \n Min.   :2.000   Min.   :3.000   Min.   :4   Length:1436       \n 1st Qu.:3.000   1st Qu.:5.000   1st Qu.:4   Class :character  \n Median :4.000   Median :5.000   Median :4   Mode  :character  \n Mean   :4.033   Mean   :5.026   Mean   :4                     \n 3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:4                     \n Max.   :5.000   Max.   :6.000   Max.   :4                     \n    Color             Met_Color        Automatic       Mfr_Guarantee   \n Length:1436        Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n Class :character   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Mode  :character   Median :1.0000   Median :0.00000   Median :0.0000  \n                    Mean   :0.6748   Mean   :0.05571   Mean   :0.4095  \n                    3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000  \n                    Max.   :1.0000   Max.   :1.00000   Max.   :1.0000  \n BOVAG_Guarantee       ABS            Airbag_1         Airbag_2     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.0000   Median :1.0000   Median :1.0000  \n Mean   :0.8955   Mean   :0.8134   Mean   :0.9708   Mean   :0.7228  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n     Airco        Automatic_airco   Boardcomputer      CD_Player     \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :1.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.5084   Mean   :0.05641   Mean   :0.2946   Mean   :0.2187  \n 3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n  Central_Lock    Powered_Windows Power_Steering       Radio       \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.000   Median :1.0000   Median :0.0000  \n Mean   :0.5801   Mean   :0.562   Mean   :0.9777   Mean   :0.1462  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n   Mistlamps      Sport_Model     Backseat_Divider  Metallic_Rim   \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  \n Mean   :0.257   Mean   :0.3001   Mean   :0.7702   Mean   :0.2047  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n Radio_cassette      Tow_Bar      \n Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000  \n Mean   :0.1455   Mean   :0.2779  \n 3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#installing-and-loading-the-packages",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#installing-and-loading-the-packages",
    "title": "In-class Exercise 5 - Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "pacman::p_load(tidyverse, readxl, SmartEDA, \n               easystats, gtsummary, ggstatsplot)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data-import",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data-import",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "car_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#boxplot",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#boxplot",
    "title": "In-class Exercise 5",
    "section": "3.1 Boxplot",
    "text": "3.1 Boxplot"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-the-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-the-data",
    "title": "In-class Exercise 5 - Visual Analytics for Building Better Explanatory Models",
    "section": "",
    "text": "car_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \"data\")\n\n\nglimpse(car_resale)\n\nRows: 1,436\nColumns: 38\n$ Id               &lt;dbl&gt; 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 45, 46, 47, 49, 51, 6…\n$ Model            &lt;chr&gt; \"TOYOTA Corolla 1.6 5drs 1 4/5-Doors\", \"TOYOTA Coroll…\n$ Price            &lt;dbl&gt; 18950, 13500, 13750, 13950, 14950, 13750, 12950, 1690…\n$ Age_08_04        &lt;dbl&gt; 25, 23, 23, 24, 26, 30, 32, 27, 30, 27, 22, 23, 27, 2…\n$ Mfg_Month        &lt;dbl&gt; 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 11, 10, 6, 11, 11, 11…\n$ Mfg_Year         &lt;dbl&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002,…\n$ KM               &lt;dbl&gt; 20019, 46986, 72937, 41711, 48000, 38500, 61000, 9461…\n$ Quarterly_Tax    &lt;dbl&gt; 100, 210, 210, 210, 210, 210, 210, 210, 210, 234, 234…\n$ Weight           &lt;dbl&gt; 1180, 1165, 1165, 1165, 1165, 1170, 1170, 1245, 1245,…\n$ Guarantee_Period &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ HP_Bin           &lt;chr&gt; \"100-120\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100…\n$ CC_bin           &lt;chr&gt; \"1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", …\n$ Doors            &lt;dbl&gt; 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3,…\n$ Gears            &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ Cylinders        &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ Fuel_Type        &lt;chr&gt; \"Petrol\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            &lt;chr&gt; \"Blue\", \"Blue\", \"Silver\", \"Blue\", \"Black\", \"Black\", \"…\n$ Met_Color        &lt;dbl&gt; 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,…\n$ Automatic        &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mfr_Guarantee    &lt;dbl&gt; 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,…\n$ BOVAG_Guarantee  &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ ABS              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_1         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_2         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airco            &lt;dbl&gt; 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Automatic_airco  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,…\n$ Boardcomputer    &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ CD_Player        &lt;dbl&gt; 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,…\n$ Central_Lock     &lt;dbl&gt; 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Powered_Windows  &lt;dbl&gt; 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Power_Steering   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Radio            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mistlamps        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Sport_Model      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,…\n$ Backseat_Divider &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Metallic_Rim     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Radio_cassette   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Tow_Bar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nlist(car_resale)\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\nsummary(car_resale)\n\n       Id            Model               Price         Age_08_04    \n Min.   :   1.0   Length:1436        Min.   : 4350   Min.   : 1.00  \n 1st Qu.: 361.8   Class :character   1st Qu.: 8450   1st Qu.:44.00  \n Median : 721.5   Mode  :character   Median : 9900   Median :61.00  \n Mean   : 721.6                      Mean   :10731   Mean   :55.95  \n 3rd Qu.:1081.2                      3rd Qu.:11950   3rd Qu.:70.00  \n Max.   :1442.0                      Max.   :32500   Max.   :80.00  \n   Mfg_Month         Mfg_Year          KM         Quarterly_Tax   \n Min.   : 1.000   Min.   :1998   Min.   :     1   Min.   : 19.00  \n 1st Qu.: 3.000   1st Qu.:1998   1st Qu.: 43000   1st Qu.: 69.00  \n Median : 5.000   Median :1999   Median : 63390   Median : 85.00  \n Mean   : 5.549   Mean   :2000   Mean   : 68533   Mean   : 87.12  \n 3rd Qu.: 8.000   3rd Qu.:2001   3rd Qu.: 87021   3rd Qu.: 85.00  \n Max.   :12.000   Max.   :2004   Max.   :243000   Max.   :283.00  \n     Weight     Guarantee_Period    HP_Bin             CC_bin         \n Min.   :1000   Min.   : 3.000   Length:1436        Length:1436       \n 1st Qu.:1040   1st Qu.: 3.000   Class :character   Class :character  \n Median :1070   Median : 3.000   Mode  :character   Mode  :character  \n Mean   :1072   Mean   : 3.815                                        \n 3rd Qu.:1085   3rd Qu.: 3.000                                        \n Max.   :1615   Max.   :36.000                                        \n     Doors           Gears         Cylinders  Fuel_Type        \n Min.   :2.000   Min.   :3.000   Min.   :4   Length:1436       \n 1st Qu.:3.000   1st Qu.:5.000   1st Qu.:4   Class :character  \n Median :4.000   Median :5.000   Median :4   Mode  :character  \n Mean   :4.033   Mean   :5.026   Mean   :4                     \n 3rd Qu.:5.000   3rd Qu.:5.000   3rd Qu.:4                     \n Max.   :5.000   Max.   :6.000   Max.   :4                     \n    Color             Met_Color        Automatic       Mfr_Guarantee   \n Length:1436        Min.   :0.0000   Min.   :0.00000   Min.   :0.0000  \n Class :character   1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000  \n Mode  :character   Median :1.0000   Median :0.00000   Median :0.0000  \n                    Mean   :0.6748   Mean   :0.05571   Mean   :0.4095  \n                    3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000  \n                    Max.   :1.0000   Max.   :1.00000   Max.   :1.0000  \n BOVAG_Guarantee       ABS            Airbag_1         Airbag_2     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.0000   Median :1.0000   Median :1.0000  \n Mean   :0.8955   Mean   :0.8134   Mean   :0.9708   Mean   :0.7228  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n     Airco        Automatic_airco   Boardcomputer      CD_Player     \n Min.   :0.0000   Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :1.0000   Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.5084   Mean   :0.05641   Mean   :0.2946   Mean   :0.2187  \n 3rd Qu.:1.0000   3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n  Central_Lock    Powered_Windows Power_Steering       Radio       \n Min.   :0.0000   Min.   :0.000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :1.0000   Median :1.000   Median :1.0000   Median :0.0000  \n Mean   :0.5801   Mean   :0.562   Mean   :0.9777   Mean   :0.1462  \n 3rd Qu.:1.0000   3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.0000   Max.   :1.000   Max.   :1.0000   Max.   :1.0000  \n   Mistlamps      Sport_Model     Backseat_Divider  Metallic_Rim   \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :0.000   Median :0.0000   Median :1.0000   Median :0.0000  \n Mean   :0.257   Mean   :0.3001   Mean   :0.7702   Mean   :0.2047  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n Radio_cassette      Tow_Bar      \n Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000  \n Mean   :0.1455   Mean   :0.2779  \n 3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#bar-plots-for-all-categorical-variables",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#bar-plots-for-all-categorical-variables",
    "title": "In-class Exercise 5 - Visual Analytics for Building Better Explanatory Models",
    "section": "Bar plots for all categorical variables",
    "text": "Bar plots for all categorical variables\n\ncar_resale %&gt;%\n  ExpCatViz(target = NULL,\n            col = \"sky blue\",\n            clim = 10,\n            margin = 2,\n            Page = c(4,4),\n            sample = 16)\n\n$`0`\n\n\n\n\n\n\n\n\n\n\ncar_resale %&gt;%\n  ExpNumViz(target = \"Price\",\n            scatter = FALSE,\n            fname = NULL,\n            col = \"green\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c  &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_normality(model1)\n\nWarning: Non-normality of residuals detected (p &lt; .001).\n\n\n\ncheck_heteroscedasticity(model1)\n\nWarning: Heteroscedasticity (non-constant error variance) detected (p &lt; .001).\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\nsummary(model1)\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10426.3   -737.3     -6.4    739.1   6591.4 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -2.637e+06  2.618e+05 -10.072   &lt;2e-16 ***\nAge_08_04        -1.409e+01  1.081e+01  -1.304   0.1924    \nMfg_Year          1.315e+03  1.307e+02  10.064   &lt;2e-16 ***\nKM               -2.323e-02  1.163e-03 -19.969   &lt;2e-16 ***\nWeight            1.903e+01  8.129e-01  23.405   &lt;2e-16 ***\nGuarantee_Period  2.770e+01  1.219e+01   2.272   0.0232 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1366 on 1430 degrees of freedom\nMultiple R-squared:  0.8586,    Adjusted R-squared:  0.8581 \nF-statistic:  1737 on 5 and 1430 DF,  p-value: &lt; 2.2e-16\n\n\n\ntbl_regression(model1,\n               intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n-2,636,783\n-3,150,331, -2,123,236\n&lt;0.001\n\n\nAge_08_04\n-14\n-35, 7.1\n0.2\n\n\nMfg_Year\n1,315\n1,059, 1,571\n&lt;0.001\n\n\nKM\n-0.02\n-0.03, -0.02\n&lt;0.001\n\n\nWeight\n19\n17, 21\n&lt;0.001\n\n\nGuarantee_Period\n28\n3.8, 52\n0.023\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\n\ntbl_regression(model1,\n               intercept = TRUE) %&gt;%\n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared,\n                AIC, statistic,\n                p.value, sigma)\n  )\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,636,783\n-3,150,331, -2,123,236\n&lt;0.001\n    Age_08_04\n-14\n-35, 7.1\n0.2\n    Mfg_Year\n1,315\n1,059, 1,571\n&lt;0.001\n    KM\n-0.02\n-0.03, -0.02\n&lt;0.001\n    Weight\n19\n17, 21\n&lt;0.001\n    Guarantee_Period\n28\n3.8, 52\n0.023\n  \n  \n    \n      R² = 0.859; Adjusted R² = 0.858; AIC = 24,819; Statistic = 1,737; p-value = &lt;0.001; σ = 1,366\n    \n  \n  \n    \n      1 CI = Confidence Interval"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ship-count-visualizations",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ship-count-visualizations",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "4.1 Ship Count Visualizations",
    "text": "4.1 Ship Count Visualizations\n\n4.1.1 Distribution of Ships by Engine Type (Faceted by Route Type)\n\n# Filtering the dataset for relevant weather conditions & route types\nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Engine_Type != \"None\", Route_Type != \"None\")\n\np &lt;- ggplot(ship_data_filtered, \n       aes(x = Engine_Type, fill = Engine_Type)) +\n  geom_bar(position = \"dodge\", aes(text = after_stat(count))) +\n  facet_wrap(~Route_Type) +   # Separate plots for each Route Type\n  theme_minimal() +\n  labs(title = \"Distribution of Ships by Engine Type (Faceted by Route Type)\", \n       x = \"Engine Type\", \n       y = \"Count of Ships\", \n       fill = \"Engine Type\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to an interactive plot with hover tooltips\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\nInsights -\n\nThe number of ships for each engine type appears relatively consistent across the four route types (Coastal, Short-haul, Long-haul, Transoceanic).\nDiesel and HFO-powered ships are generally higher in count compared to Steam Turbine ships across all routes. This suggests that Diesel and HFO are the preferred engine types for most shipping operations.\nHowever, in Long-haul and Transoceanic routes, Steam Turbine usage appears to be relatively higher compared to Coastal and Short-haul routes. This might indicate that Steam Turbines are more suited for longer voyages.\n\n\n\n4.1.2 Comparison of Ships on Maintenance Status\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)\n\n# Filter dataset for Ship Type (removing 'None')\nship_data_filtered1 &lt;- ship_data %&gt;% \n  filter(Maintenance_Status != \"None\", Ship_Type != \"None\")\n\n# First bar chart (Ship Type vs. Maintenance Status)\np1 &lt;- ggplot(ship_data_filtered1, aes(x = Ship_Type, fill = Maintenance_Status)) +\n  geom_bar(position = \"dodge\", width = 0.6) +  # Adjust bar width\n  theme_minimal(base_size = 12) +  # Smaller font size\n  labs(title = \"by Ship Type\", \n       x = \"Ship Type\", \n       y = \"Count of Ships\") +  # Removed 'fill' from here\n  theme(\n    axis.text.x = element_text(angle = 20, hjust = 1, size = 10),  # Improve readability\n    legend.position = \"top\",  # Move legend to top\n    legend.text = element_text(size = 8),  # Smaller legend text\n    legend.title = element_text(size = 9)  # Smaller legend title\n  )\n\n# Filter dataset for Route Type (removing 'None')\nship_data_filtered2 &lt;- ship_data %&gt;% \n  filter(Maintenance_Status != \"None\", Route_Type != \"None\")\n\n# Second bar chart (Route Type vs. Maintenance Status)\np2 &lt;- ggplot(ship_data_filtered2, aes(x = Route_Type, fill = Maintenance_Status)) +\n  geom_bar(position = \"dodge\", width = 0.6) +  \n  theme_minimal(base_size = 12) +  \n  labs(title = \"by Route Type\", \n       x = \"Route Type\", \n       y = \"Count of Ships\") +  # Removed 'fill' from here\n  theme(\n    axis.text.x = element_text(angle = 20, hjust = 1, size = 10), \n    legend.position = \"none\"  # Hide legend from second plot (since it's shared)\n  )\n\n# Arrange the plots properly\nfinal_plot &lt;- (p1 | p2) +  \n  plot_layout(widths = c(1.2, 1)) +  # Increase width of charts\n  plot_annotation(\n    title = \"Comparison of Ships on Maintenance Status\",\n    theme = theme(plot.title = element_text(size = 16, face = \"bold\"))\n  )\n\n# Display the final adjusted plot\nprint(final_plot)\n\n\n\n\n\n\n\n\nInsights -\n\nBy Ship Type - Overall fish carriers seem to be performing the best with higher good ships over critical ones. Container Ships and Bulk Carriers have more ships in “Critical” condition suggesting that these ship types might require more frequent maintenance or are more prone to issues. Tanker ships seem to be faring well with less critical ships too.\nBy Route Type - Short-haul and Transoceanic ships have a relatively higher number of ships in “Critical” condition indicating that shorter or longer cross-ocean voyages result in more wear and tear, requiring more attention to maintenance. Though by that understanding, even if Long-Haul has similar no. of Critical ships as the other two, they have more no. of better ships indicating that some other factors such as weather conditions could be under play. Overall coastal ships seem to be performing the best with higher good ships over critical ones."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#operations-cost-and-profit-related",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#operations-cost-and-profit-related",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "4.2 Operations cost and profit related",
    "text": "4.2 Operations cost and profit related\n\n4.2.1 Operational Cost Distribution by Route Type\n\n# Filtering out \"None\" values\nship_data_filtered &lt;- ship_data %&gt;%\n  filter(Route_Type != \"None\")\n\n# Creating the faceted histograms with density curves\nggplot(ship_data_filtered, \n       aes(x = Operational_Cost_USD)) +\n  geom_histogram(aes(y = ..density..), \n                 bins = 30, \n                 fill = \"steelblue\", \n                 color = \"black\", \n                 alpha = 0.6) +  # Histogram bars\n  geom_density(color = \"red\", \n               linewidth = 1.2, \n               adjust = 1.2) +  # Density curve\n  facet_wrap(~Route_Type, scales = \"free\") +  # Separate plots for each Route_Type\n  theme_minimal() +\n  labs(title = \"Operational Cost Distribution by Route Type\",\n       x = \"Operational Cost (USD)\", \n       y = \"Density\") +\n  theme(legend.position = \"none\")  # No need for legend in faceted charts\n\n\n\n\n\n\n\n\nInsights -\n\nThe histogram bars (blue) represent the frequency of operational costs, while the red line shows the density distribution. All route types show a fairly spread-out distribution of operational costs, indicating no extreme outliers.\nShort-haul route looks to be the most uniform distribution among all route types indicating stable oprational cost pattern whereas Long-haul routes demonstrate slightly more uneven distribution with multiple spikes throughout the range indicating other factors may come into play.\nCoastal seems to have more density/skewness towards the left side indicating that in general their operational costs tend to be on the lower side of the range which could be since they are not on long voyages. On the other hand, transoceaninc has higher density of ships at mid-to-high cost levels, indicating higher operational expenses for transoceanic routes compared to others.\n\n\n\n4.2.2 Overlapping Profit Distributions by Maintenance_Status\n\n# Filtering out \"None\" values and calculating profit\nship_data_filtered &lt;- ship_data %&gt;%\n  filter(Maintenance_Status != \"None\") %&gt;%\n  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)  # Compute Profit\n\n# Creating the overlapped density plot for Profit by Route Type\nggplot(ship_data_filtered, \n       aes(x = Profit, color = Maintenance_Status)) +  # Color by Route Type\n  geom_density(linewidth = 1.2, adjust = 1.2) +  # Density curves\n  theme_minimal() +\n  labs(title = \"Overlapping Profit Distributions by Maintenance_Status\",\n       x = \"Profit (Revenue - Cost) in USD\", \n       y = \"Density\",\n       color = \"Maintenance_Status\") +  # Legend for Ship Type\n  theme(legend.position = \"right\")  # Adjust legend position if needed\n\n\n\n\n\n\n\n\nInsights -\n\nThe graph shows overlapping probability density distributions of profit (revenue - cost) across different maintenance statuses (Critical, Fair, and Good). The bell-shaped distribution indicates that most profits are centered around a peak range, with fewer ships experiencing extreme profits or losses.\nGood maintenance status (blue line) has the highest peak, meaning more ships in good maintenance condition tend to generate profits around the average range. Fair maintenance status (green line) follows a similar trend, but with slightly lower density at peak profit values. Critical maintenance status (red line) has the lowest peak and flattest distribution, suggesting higher variability in profits, with some ships performing well and others struggling.\nThe left tail of the distribution (negative profit) suggests that some ships are running at a loss, regardless of maintenance status."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#efficiency-distribution-by-route-type-and-different-weather-conditions--",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#efficiency-distribution-by-route-type-and-different-weather-conditions--",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "4.3 Efficiency Distribution by Route Type and different Weather Conditions -",
    "text": "4.3 Efficiency Distribution by Route Type and different Weather Conditions -\n\n4.3.1 Calm\n\n# Filtering the dataset for relevant weather conditions & route types\nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Weather_Condition == \"Calm\", Route_Type != \"None\")\n\n# Ridgeline Plot (without colors per route)\nggplot(ship_data_filtered, \n       aes(x = Efficiency_nm_per_kWh, \n           y = Route_Type)) +\n  geom_density_ridges(fill = \"lightblue\", alpha = 0.8, scale = 1.2) +  # No color per route\n  theme_minimal() + \n  labs(title = \"Energy Efficiency Distribution by Route Type (Calm Weather)\", \n       x = \"Efficiency (nm per kWh)\", \n       y = \"Route Type\") +\n  theme(legend.position = \"none\")  # Remove legend\n\n\n\n\n\n\n\n\nInsights -\nThis ridgeline plot illustrates the energy efficiency distribution (nm/kWh) across different route types in calm weather. Transoceanic routes exhibit the widest spread, with peaks around 0.6 (lower efficiency, possibly due to difficult segments) and 1.3 (optimal efficiency, likely aided by favorable currents). Short-haul routes have a more concentrated distribution in comparison, with a lower peak near 0.4, potentially due to start-up delays or congestion, and a dominant peak at 1.1 nm/kWh, indicating typical cruising efficiency.\n\nLong-haul routes display two peaks at 0.5 and 1.3, suggesting varying efficiency regimes—lower during cargo operations and higher during uninterrupted cruising. Coastal routes show the least variability, with peaks around 0.6 and 1.2, indicating more stable and predictable conditions. Overall, the efficiency ranges generally overlap across all route types, suggesting some commonality in operational parameters.\n\n\n4.3.2 Moderate\n\n# Filtering the dataset for relevant weather conditions & route types\nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Weather_Condition == \"Moderate\", Route_Type != \"None\")\n\n# Ridgeline Plot (without colors per route)\nggplot(ship_data_filtered, \n       aes(x = Efficiency_nm_per_kWh, \n           y = Route_Type)) +\n  geom_density_ridges(fill = \"lightblue\", alpha = 0.8, scale = 1.2) +  # No color per route\n  theme_minimal() + \n  labs(title = \"Energy Efficiency Distribution by Route Type (Moderate Weather)\", \n       x = \"Efficiency (nm per kWh)\", \n       y = \"Route Type\") +\n  theme(legend.position = \"none\")  # Remove legend\n\n\n\n\n\n\n\n\n\n\n4.3.3 Rough\n\n# Filtering the dataset for relevant weather conditions & route types\nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Weather_Condition == \"Rough\", Route_Type != \"None\")\n\n# Ridgeline Plot (without colors per route)\nggplot(ship_data_filtered, \n       aes(x = Efficiency_nm_per_kWh, \n           y = Route_Type)) +\n  geom_density_ridges(fill = \"lightblue\", alpha = 0.8, scale = 1.2) +  # No color per route\n  theme_minimal() + \n  labs(title = \"Energy Efficiency Distribution by Route Type (Rough Weather)\", \n       x = \"Efficiency (nm per kWh)\", \n       y = \"Route Type\") +\n  theme(legend.position = \"none\")  # Remove legend"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "The maritime sector is one of the most critical components of global trade, contributing significantly to economic growth and sustainability. It faces increasing pressure to optimize operations while maintaining safety and environmental standards. The Gulf of Guinea represents a significant maritime region where understanding vessel performance is crucial for operational success, reducing costs, and minimizing environmental impact.\n\n\n\nAs the graphical editor for an international media company, our task is to create insightful and informative visualizations that reveal meaningful patterns in ship performance data. Specifically, we aim to:\n\nAnalyze and visualize energy efficiency distributions across different route types and weather conditions\nExamine maintenance patterns across different ship and route types\nInvestigate operational cost distributions for various route categories\nPresent these findings through clear, compelling visualizations using R’s ggplot2 and its extensions\n\nThrough this analysis, we seek to provide actionable insights that could benefit maritime stakeholders in optimizing their operations and making informed decisions about route planning, maintenance scheduling, and cost management."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "The maritime sector is one of the most critical components of global trade, contributing significantly to economic growth and sustainability. It faces increasing pressure to optimize operations while maintaining safety and environmental standards. The Gulf of Guinea represents a significant maritime region where understanding vessel performance is crucial for operational success, reducing costs, and minimizing environmental impact."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#our-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#our-task",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "As the graphical editor for an international media company, our task is to create insightful and informative visualizations that reveal meaningful patterns in ship performance data. Specifically, we aim to:\n\nAnalyze and visualize energy efficiency distributions across different route types and weather conditions\nExamine maintenance patterns across different ship and route types\nInvestigate operational cost distributions for various route categories\nPresent these findings through clear, compelling visualizations using R’s ggplot2 and its extensions\n\nThrough this analysis, we seek to provide actionable insights that could benefit maritime stakeholders in optimizing their operations and making informed decisions about route planning, maintenance scheduling, and cost management."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ship-performance-and-maintenance-trends",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#ship-performance-and-maintenance-trends",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "4.1 Ship Performance and Maintenance Trends",
    "text": "4.1 Ship Performance and Maintenance Trends\n\n4.1.1 Engine Type Preferences across different Route Types\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n# Filtering the dataset \nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Engine_Type != \"None\", Route_Type != \"None\")\n\np &lt;- ggplot(ship_data_filtered, \n       aes(x = Engine_Type, fill = Engine_Type)) +\n  geom_bar(position = \"dodge\", aes(text = after_stat(count))) +\n  facet_wrap(~Route_Type) +   # Separate plots for each Route Type\n  theme_minimal() +\n  labs(title = \"Distribution of Ships by Engine Type (Faceted by Route Type)\", \n       x = \"Engine Type\", \n       y = \"Count of Ships\", \n       fill = \"Engine Type\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert to an interactive plot with hover tooltips\nggplotly(p, tooltip = \"text\")\n\n\n\n\nInsights -\n\nThe number of ships for each engine type appears relatively consistent across the four route types (Coastal, Short-haul, Long-haul, Transoceanic).\nDiesel and HFO-powered ships dominate across all routes, indicating their preference in most shipping operations.\nHowever, Steam Turbine usage is relatively higher in Long-haul and Transoceanic routes, suggesting that these engines might be better suited for extended voyages.\n\n\n\n4.1.2 Maintenance Status Insights across Ship and Route Types\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filter dataset for Ship Type (removing 'None')\nship_data_filtered1 &lt;- ship_data %&gt;% \n  filter(Maintenance_Status != \"None\", Ship_Type != \"None\")\n\n# First bar chart (Ship Type vs. Maintenance Status)\np1 &lt;- ggplot(ship_data_filtered1, aes(x = Ship_Type, fill = Maintenance_Status)) +\n  geom_bar(position = \"dodge\", width = 0.6) +  \n  theme_minimal(base_size = 12) +  \n  labs(title = \"by Ship Type\", \n       x = \"Ship Type\", \n       y = \"Ship Count\") +  \n  theme(\n    axis.text.x = element_text(angle = 20, hjust = 1, size = 10),  \n    legend.position = \"top\",  \n    legend.text = element_text(size = 8), \n    legend.title = element_text(size = 9)  \n  )\n\n# Filter dataset for Route Type (removing 'None')\nship_data_filtered2 &lt;- ship_data %&gt;% \n  filter(Maintenance_Status != \"None\", Route_Type != \"None\")\n\n# Second bar chart (Route Type vs. Maintenance Status)\np2 &lt;- ggplot(ship_data_filtered2, aes(x = Route_Type, fill = Maintenance_Status)) +\n  geom_bar(position = \"dodge\", width = 0.6) +  \n  theme_minimal(base_size = 12) +  \n  labs(title = \"by Route Type\", \n       x = \"Route Type\", \n       y = \"Ship Count\") +  \n  theme(\n    axis.text.x = element_text(angle = 20, hjust = 1, size = 10), \n    legend.position = \"none\"  # Hide legend from second plot (since it's shared)\n  )\n\n# Arrange the plots properly\nfinal_plot &lt;- (p1 | p2) +  \n  plot_layout(widths = c(1.2, 1)) +  \n  plot_annotation(\n    title = \"Comparison of Ships on Maintenance Status\",\n    theme = theme(plot.title = element_text(size = 16, face = \"bold\"))\n  )\n\n# Display the final adjusted plot\nprint(final_plot)\n\n\n\n\nInsights -\n\nBy Ship Type:\n\nFish Carriers seem to be performing the best, with a higher proportion of ships in “Good” condition.\nContainer Ships and Bulk Carriers have more ships in “Critical” condition, indicating higher maintenance needs or susceptibility to operational stress.\nTanker ships also appear to be well-maintained, with fewer ships in critical condition.\n\nBy Route Type:\n\nShort-haul and Transoceanic routes have a higher number of ships in “Critical” condition, suggesting that extreme voyage lengths (either short or long) lead to more wear and tear.\nLong-haul routes have a similar number of critical ships but also a higher number of well-maintained ships, indicating other influencing factors such as weather conditions.\nCoastal ships seem to have the best overall maintenance status, possibly due to easier access to regular servicing."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#financial-performance-across-operational-and-maintenance-factors",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#financial-performance-across-operational-and-maintenance-factors",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "4.2 Financial Performance Across Operational and Maintenance Factors",
    "text": "4.2 Financial Performance Across Operational and Maintenance Factors\n\n4.2.1 Operational Cost Patterns Across Different Route Types\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering out \"None\" values\nship_data_filtered &lt;- ship_data %&gt;%\n  filter(Route_Type != \"None\")\n\n# Creating the faceted histograms with density curves\nggplot(ship_data_filtered, \n       aes(x = Operational_Cost_USD)) +\n  geom_histogram(aes(y = ..density..), \n                 bins = 30, \n                 fill = \"steelblue\", \n                 color = \"black\", \n                 alpha = 0.6) +  # Histogram bars\n  geom_density(color = \"red\", \n               linewidth = 1.2, \n               adjust = 1.2) +  # Density curve\n  facet_wrap(~Route_Type, scales = \"free\") +  # Separate plots for each Route_Type\n  theme_minimal() +\n  labs(title = \"Operational Cost Distribution by Route Type\",\n       x = \"Operational Cost (USD)\", \n       y = \"Density\") +\n  theme(legend.position = \"none\")  # No need for legend in faceted charts\n\n\n\n\nInsights -\n\nThe histogram bars (blue) represent the frequency of operational costs, while the red line shows the density distribution. All route types show a fairly spread-out distribution of operational costs, indicating no extreme outliers.\nShort-haul routes exhibit a uniform distribution, indicating relatively stable operational cost patterns. Long-haul routes show multiple peaks in cost distribution, suggesting that additional factors (such as fuel prices or route-specific expenses) may influence cost variability.\nCoastal routes have a slightly left-skewed distribution, meaning that most ships operate at lower operational costs, likely due to shorter voyages and lower fuel consumption whereas Transoceanic routes have a higher density of ships in mid-to-high operational cost levels, confirming that these voyages tend to be the most expensive.\n\n\n\n4.2.2 Impact of Maintenance Status on Profitability\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering out \"None\" values and calculating profit\nship_data_filtered &lt;- ship_data %&gt;%\n  filter(Maintenance_Status != \"None\") %&gt;%\n  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)  # Compute Profit\n\nggplot(ship_data_filtered, \n       aes(x = Profit, color = Maintenance_Status)) +  \n  geom_density(linewidth = 1.2, adjust = 1.2) +  # Density curves\n  theme_minimal() +\n  labs(title = \"Profit Distributions by Maintenance Status\",\n       x = \"Profit (Revenue - Cost) in USD\", \n       y = \"Density\",\n       color = \"Maintenance Status\") +  \n  theme(legend.position = \"right\")  \n\n\n\n\nInsights -\n\nThe graph shows overlapping probability density distributions of profit (revenue - cost) across different maintenance statuses (Critical, Fair, and Good). The bell-shaped distribution indicates that most profits are centered around a peak range, with fewer ships experiencing extreme profits or losses.\nShips in “Good” maintenance condition (blue) have the highest peak, indicating that most well-maintained ships achieve a stable and predictable profit margin. Ships in “Fair” condition (green) follow a similar pattern but with slightly lower profit peaks, suggesting that maintenance quality plays a role in financial performance.\nShips in “Critical” condition (red) exhibit a slightly widest spread on the right, with profits varying significantly. Some of these ships perform well, but it has the lowest profit peak amongst the 3.\nThe left tail of the distribution indicates that some ships operate at a loss, regardless of their maintenance condition, highlighting potential inefficiencies in fleet management."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#efficiency-distribution-across-different-weather-conditions",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#efficiency-distribution-across-different-weather-conditions",
    "title": "Take-home Exercise 1 - Ship Performance in the Gulf of Guinea",
    "section": "4.3 Efficiency Distribution Across Different Weather Conditions",
    "text": "4.3 Efficiency Distribution Across Different Weather Conditions\n\n4.3.1 Efficiency in Calm Weather by Route Type\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering the dataset \nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Weather_Condition == \"Calm\", Route_Type != \"None\")\n\n# Ridgeline Plot \nggplot(ship_data_filtered, \n       aes(x = Efficiency_nm_per_kWh, \n           y = Route_Type)) +\n  geom_density_ridges(fill = \"lightblue\", alpha = 0.8, scale = 1.2) +  \n  theme_minimal() + \n  labs(title = \"Energy Efficiency Distribution by Route Type (Calm Weather)\", \n       x = \"Efficiency (nm per kWh)\", \n       y = \"Route Type\") +\n  theme(legend.position = \"none\")  \n\n\n\n\nInsights -\n\nThis ridgeline plot illustrates the energy efficiency distribution (nm/kWh) across different route types in calm weather. Transoceanic routes exhibit the widest spread, with peaks around 0.6 (lower efficiency, possibly due to difficult segments) and 1.3 (optimal efficiency, likely aided by favorable currents). Short-haul routes have a more concentrated distribution in comparison, with a lower peak near 0.4, potentially due to start-up delays or congestion, and a dominant peak at 1.1 nm/kWh, indicating typical cruising efficiency.\nLong-haul routes display two peaks at 0.5 and 1.3, suggesting varying efficiency regimes—lower during cargo operations and higher during uninterrupted cruising. Coastal routes show the least variability, with peaks around 0.6 and 1.2, indicating more stable and predictable conditions. Overall, the efficiency ranges generally overlap across all route types, suggesting some commonality in operational parameters.\n\n\n\n4.3.2 Efficiency in Moderate Weather by Route Type\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering the dataset for relevant weather conditions & route types\nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Weather_Condition == \"Moderate\", Route_Type != \"None\")\n\n# Ridgeline Plot\nggplot(ship_data_filtered, \n       aes(x = Efficiency_nm_per_kWh, \n           y = Route_Type)) +\n  geom_density_ridges(fill = \"lightblue\", alpha = 0.8, scale = 1.2) + \n  theme_minimal() + \n  labs(title = \"Energy Efficiency Distribution by Route Type (Moderate Weather)\", \n       x = \"Efficiency (nm per kWh)\", \n       y = \"Route Type\") +\n  theme(legend.position = \"none\")  \n\n\n\n\nInsights -\n\nTransoceanic routes show a more consolidated distribution with a dominant peak around 0.8 nm/kWh, suggesting that moderate weather conditions may normalize efficiency levels across the route. Short-haul routes display a relatively consistent density between 0.4-0.8 nm/kWh, indicating more uniform operating conditions despite weather changes.\nLong-haul routes exhibit a prominent peak around 0.5-0.6 nm/kWh, suggesting that moderate weather conditions might push efficiency towards the lower end of the spectrum. Coastal routes show a distinctive peak near 0.9 nm/kWh, with a more symmetrical distribution compared to calm weather conditions.\nUnlike the bimodal trends seen in calm weather, moderate conditions tend to consolidate efficiency distributions, likely due to standardized operational adjustments made for such weather.\n\n\n\n4.3.3 Efficiency in Rough Weather by Route Type\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering the dataset\nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Weather_Condition == \"Rough\", Route_Type != \"None\")\n\n# Ridgeline Plot\nggplot(ship_data_filtered, \n       aes(x = Efficiency_nm_per_kWh, \n           y = Route_Type)) +\n  geom_density_ridges(fill = \"lightblue\", alpha = 0.8, scale = 1.2) +\n  theme_minimal() + \n  labs(title = \"Energy Efficiency Distribution by Route Type (Rough Weather)\", \n       x = \"Efficiency (nm per kWh)\", \n       y = \"Route Type\") +\n  theme(legend.position = \"none\")  \n\n\n\n\nInsights -\n\nTransoceanic routes maintain a relatively stable density until a notable peak around 1.4 nm/kWh, suggesting that despite rough conditions, these vessels can achieve high efficiency in certain segments. Short-haul routes demonstrate multiple small peaks, particularly at 0.6 and 1.3 nm/kWh, indicating varying efficiency levels possibly due to different operational phases or route segments in rough weather.\nLong-haul routes show higher density in the 0.2-0.7 nm/kWh range, suggesting that rough weather conditions significantly impact their efficiency, pushing it towards the lower end of the spectrum. Coastal routes exhibit dense distribution in the 0.2-0.6 nm/kWh range with another small peak around 1.3 nm/kWh, indicating that while rough weather generally reduces efficiency, some coastal operations can still achieve higher efficiency levels in specific conditions.\n\n\n\n4.3.4 Efficiency Across Weather Conditions by Ship Type\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering the dataset \nship_data_filtered &lt;- ship_data %&gt;% \n  filter(Ship_Type != \"None\", Weather_Condition != \"None\")\n\n# Ridgeline Plot for all weather conditions\nggplot(ship_data_filtered, \n       aes(x = Efficiency_nm_per_kWh, \n           y = Ship_Type, \n           fill = Weather_Condition)) +  # Color fill based on Weather Condition\n  geom_density_ridges(alpha = 0.8, scale = 1.2) +  \n  facet_wrap(~Weather_Condition) +  # Separate plots for each Weather Condition\n  theme_minimal() + \n  labs(title = \"Efficiency Distribution by Ship Type Across Weather Conditions\", \n       x = \"Efficiency (nm per kWh)\", \n       y = \"Route Type\",\n       fill = \"Weather Condition\") +\n  theme(legend.position = \"bottom\") \n\n\n\n\nInsights -\nEfficiency Patterns Across Weather Conditions:\n\nCalm Weather (Red): Efficiency distributions are more spread out, with some ships achieving higher efficiency (1.5+ nm per kWh).\nModerate Weather (Green): The distributions narrow slightly, indicating more consistency in efficiency but with a peak shift towards the mid-range (0.6 - 1.0 nm per kWh).\nRough Weather (Blue): Efficiency drops further, with fewer ships reaching high efficiency levels, and peaks shifting toward lower efficiency values.\n\nShip Type-Specific Observations:\n\nTankers appear to be the least resistant to rough weather, generally maintaining moderate efficiency levels across all conditions.\nFish Carriers surprisingly exhibit a low efficiency peak in calm weather and overall achieve only moderate efficiency levels across conditions.\nContainer Ships and Bulk Carriers follow a similar trend, achieving high efficiency in calm weather but experiencing efficiency losses as conditions worsen—though not as severe as Tankers."
  }
]