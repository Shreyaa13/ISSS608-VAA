[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course.\nHi ! I am Shreya Agarwal pursuing Masters of IT in Business (MITB) specialising in Data Analytics from Singapore Management University (SMU). This website was created for my course ISSS608 - Visual Analytics taught by Professor Dr. Kam Tin Seong, where I will be uploading all the coursework being done by me."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this Author\nHi ! I am Shreya Agarwal pursuing Masters of IT in Business (MITB) specialising in Data Analytics from Singapore Management University (SMU). This website was created for my course ISSS608 - Visual Analytics where I will be uploading all the coursework being done by me."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse is packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse is packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: geom",
    "text": "Essential Grammatical Elements in ggplot2: geom\n\nggplot(data = exam_data,\n       aes(x = RACE)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) + \n  geom_histogram(bins = 20,\n                 color = \"grey30\")\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: stat",
    "text": "Essential Grammatical Elements in ggplot2: stat\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: Facets",
    "text": "Essential Grammatical Elements in ggplot2: Facets\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "Essential Grammatical Elements in ggplot2: Coordinates\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Ex 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Essential Grammatical Elements in ggplot2: themes",
    "text": "Essential Grammatical Elements in ggplot2: themes\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "This chapter introduces ggplot2 extensions for creating more elegant statistical graphics. We’ll learn to:\n\nPlace annotations effectively with the ggrepel package.\nCreate publication-quality figures using ggthemes and hrbrthemes.\nCombine ggplot2 graphs into composite figures with the patchwork package."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Refer to Tableau Public for the dashboard."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              size = 0.5) + \n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nAnnotating graphs with many data points can be challenging. The ggrepel package extends ggplot2 by providing geoms to prevent overlapping text, as shown in the examples.\nWe simply replace geom_text() with geom_text_repel() or geom_label() with geom_label_repel().\n\n2.3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              size = 0.5) + \n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#results",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#results",
    "title": "Hands-on Exercise 2",
    "section": "Results",
    "text": "Results\n\nThe plot\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nThe code\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              linewidth = 0.5) + \n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "This chapter introduces ggplot2 extensions for creating more elegant statistical graphics. We’ll learn to:\n\nPlace annotations effectively with the ggrepel package.\nCreate publication-quality figures using ggthemes and hrbrthemes.\nCombine ggplot2 graphs into composite figures with the patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting started",
    "text": "2.2 Getting started\n\n2.2.1 Installing and loading the required libraries\nIn this exercise, along with tidyverse, four R packages will be used:\n\nggrepel: Adds geoms to prevent overlapping text labels in ggplot2.\nggthemes: Offers extra themes, geoms, and scales for ggplot2.\nhrbrthemes: Focuses on typography-centric themes for ggplot2.\npatchwork: Facilitates combining ggplot2 plots into composite figures.\n\nThe code below checks if these packages are installed and loads them into the R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n2.2.2 Importing data\nThis exercise uses a CSV file, Exam_data, containing year-end exam grades of a cohort of Primary 3 students from a local school.\nThe code below imports exam_data.csv into the R environment using the read_csv() function from the readr package, which is part of tidyverse.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe exam_data tibble contains seven attributes: four categorical - ID, CLASS, GENDER, RACE and three continuous - MATHS, ENGLISH, SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 includes eight built-in themes (e.g., theme_gray(), theme_bw(), theme_minimal()).\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  theme_gray() + \n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n2.4.1 Working with ggtheme package\nggthemes package adds themes replicating plot styles from Tufte, Fivethirtyeight, The Economist, and more.\nIn the example below, the Economist theme is used. It also provides some extra geoms and scales for ‘ggplot2’.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths scores\") + \n  theme_economist()\n\n\n\n\n\n\n2.4.2 Working with hrbrthemes package\nThe hrbrthemes package offers a base theme emphasizing typography, including label placement and font customization.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths scores\") + \n  theme_ipsum()\n\n\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  ggtitle(\"Distribution of Maths scores\") + \n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\nObservations from the code chunk above :\n\naxis_title_size: Sets the font size of axis titles to 18.\nbase_size: Increases the default font size of axis labels to 15.\ngrid: Removes x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Ex 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nTo tell a visual story, it’s common to combine multiple graphs. This section shows how to create composite plots by combining multiple graphs. First, we generate three graphs using the code below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data = exam_data,\n       aes(x = MATHS)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) + \n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data = exam_data,\n       aes(x = ENGLISH)) + \n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) + \n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we draw a scatterplot for English score versus Maths score as shown below -\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) + \n  geom_point() + \n  geom_smooth(method = lm,\n              size = 0.5) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) + \n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n2.5.1 Creating Composite Graphics: pathwork methods\nSeveral ggplot2 extensions functions, like grid.arrange() of gridExtra package and plot_grid() of cowplot package, combine graphs into composites. The patchwork package simplifies this with intuitive syntax:\n\n+: Two-column layout.\n(): Groups subplots.\n/: Two-row layout.\n\n\n\n2.5.2 Combining two ggplot2 graphs\nUsing very simple syntax, we can now create a composite of two histograms using patchwork.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n2.5.3 Combining three ggplot2 graphs\nMore complex composites like the figure below is created using the operators:\n\n/: Stacks two ggplot2 plots.\n|: Places plots side by side.\n(): Defines the plotting sequence.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n2.5.4 Creating a composite figure with tag\npatchwork also provides auto-tagging properties to identify subplots in text.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n2.5.5 Creating figure with inset\nThe patchwork package not only arranges plots side by side with layouts but also allows free placement of plots or graphic elements using inset_element().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom  = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "Refer to Tableau Public for the dashboard."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#getting-started",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, we check, install, and load the following R packages:\n\nggiraph: Makes ggplot graphics interactive.\nplotly: Creates interactive statistical graphs.\nDT: Provides an R interface to the JavaScript library DataTables for interactive tables.\ntidyverse: Supports data science tasks, including static statistical graphs.\npatchwork: Combines multiple ggplot2 graphs into one figure.\n\nThe code chunk below is used to accomplish this.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv will be imported using read_csv() from the readr package.\nThe code below reads Exam_data.csv into R and saves it as a tibble called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and ggplot2 extension that makes ggplot graphics interactive.\nInteractive is made with ggplot geometries  which supports three key arguments:\n\nTooltip: Displays text when hovering over elements.\nOnclick: Executes a JavaScript function on click.\nData_id: Assigns an ID to elements for interaction.\n\nIn Shiny apps, elements with data_id can be selected and manipulated on both client and server sides.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nThe code below demonstrates how to create an interactive statistical graph using ggiraph. It consists of two parts - First, we create a ggplot object and then use girafe()  from ggiraph to convert it into an interactive svg.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nThere are two steps involved. First, an interactive version of ggplot2 geom (geom_dotplot_interactive()) is used to create the basic graph. Then, girafe() is used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.5 Interactivity",
    "text": "3.5 Interactivity\nThe student’s ID will be displayed when we hover the mouse pointer on any data point.\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\nThe tooltip content can be customized by including a list object, as shown in the code below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines create a new tooltip field by combining ID and CLASS values. This tooltip field is then used in line 7 to display customized tooltips in the interactive plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactivity-1",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.6 Interactivity",
    "text": "3.6 Interactivity\nHovering over a data point displays the student’s ID and Class as a tooltip.\n\n\n\n\n\n\n\n3.6.1 Customising Tooltip style\nThe code below uses opts_tooltip() from ggiraph to customize tooltip rendering with CSS declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNow the background colour of the tooltip is white and the font colour is black and bold.\n\n\n\n\n\n\n\n\n3.6.2 Displaying statistics on tooltip\nThe code below demonstrates an advanced tooltip customization. It uses a function to compute the 90% confidence interval of the mean, displaying the derived statistics in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (CLASS) are highlighted upon mouse hover.\n\n\n\n\n\n\nNote: The default value of the hover css is hover_css = “fill:orange;”.\n\n\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) are highlighted upon mouse over.\n\n\n\n\n\n\nNote: In this example the ccs customisation request are encoded directly.\n\n\n3.6.5 Combining tooltip and hover effect\nNow, we combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) are highlighted upon mouse over. At the same time, the tooltip shows the CLASS.\n\n\n\n\n\n\n\n\n3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views can be seen in the data visualisation below.\n\n\n\n\n\n\nWhen selecting a data point in one dotplot, the corresponding ID is highlighted in the second visualization.\nTo achieve coordinated multiple views, the following approach is used:\n\nAppropriate ggiraph interactive functions create multiple interactive views.\npatchwork (from the patchwork package) is used inside girafe() to link the coordinated multiple views interactively.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library creates interactive web graphics from ggplot2 or a custom interface to plotly.js(MIT-licensed). Unlike other Plotly platforms, plotly.R is free and open-source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below is a basic interactive plot created by using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nInteractive: click on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n3.7.4 Coordinated Multiple Views with plotly\nCreating a coordinated linked plot using plotly involves three steps:\n\nUse highlight_key() of plotly package to define shared data.\nCreate two ggplot2 scatterplots.\nUse subplot() of plotly package to arrange them side by side.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nTo learn: highlight_key() simply creates an object of class crosstalk::SharedData."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an htmlwidgets add-on that enables cross-widget interactions, such as linked brushing and filtering, by providing classes, functions, and conventions.\n\n3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#reference",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "3.9 Reference",
    "text": "3.9 Reference\n\n3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#learning-outcome",
    "title": "Hands-on Ex 3.1 - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\n\n3.2.1 Loading the R packages\nFirst, we write the code to check, install and load the following R packages:\n\nplotly, for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n3.2.2 Importing the data\nIn this exercise, we import the Data worksheet from the GlobalPopulation Excel workbook and use the appropriate package from tidyverse to load the worksheet.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn -\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nmutate_each_() was deprecated in dplyr 0.7.0, and funs() was deprecated in dplyr 0.8.0. As a result, we’ll use mutate_at() instead.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nEven, across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.3 Animated Data Visualisation: gganimate methods",
    "text": "3.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 by adding classes that define animations over time:\n\ntransition_*(): Spreads data over time and sets relationships.\nview_*(): Adjusts positional scales during animation.\nshadow_*(): Determines how past or future data is displayed.\nenter_*()/exit_*(): Manages how data appears or disappears.\nease_aes(): Controls the easing of aesthetics during transitions.\n\n\n3.3.1 Building a static population bubble plot\nThe basic ggplot2 functions are used to create a static bubble plot in the code chunk below.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n3.3.2 Building the animated bubble plot\nIn the code chunk below:\n\ntransition_time(): Creates transitions through distinct states in time (e.g., Year).\nease_aes(): Controls how aesthetics transition. Default is linear, with other options like quadratic, cubic, sine, circular, elastic, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart -"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.4 Animated Data Visualisation: plotly",
    "text": "3.4 Animated Data Visualisation: plotly\nIn Plotly’s R package, ggplotly() and plot_ly() support animations via the frame argument. They also offer an ids argument to ensure smooth transitions between objects sharing the same id, maintaining object constancy.\n\n3.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we create an animated bubble plot using ggplotly() \n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nAlthough show.legend = FALSE was used, the legend still appears. To fix this, use theme(legend.position='none'), as shown in the code below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we will create an animated bubble plot using plot_ly().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "3.5 Reference",
    "text": "3.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a story, animated graphics capture attention and leave a strong impression. In this exercise, we’ll use gganimate and plotly to create animated visualizations, while also reshaping data with tidyr and transforming it with dplyr.\n\n\nAnimations are created by generating multiple static plots, each reflecting a subset of the data. When these plots are combined, they form frames that appear to move, similar to a flipbook or cartoon.\n\n\n\n\nBefore creating an animated statistical graph, it’s helpful to understand some key concepts -\n\nFrame: In an animated line graph, each frame represents a moment in time or a category. When the frame changes, the data points update to reflect new information.\nAnimation Attributes: These are settings that control how the animation plays such as frame duration, easing functions, and whether it starts at the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "Hands-on Ex 3.2 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a story, animated graphics capture attention and leave a strong impression. In this exercise, we’ll use gganimate and plotly to create animated visualizations, while also reshaping data with tidyr and transforming it with dplyr.\n\n\nAnimations are created by generating multiple static plots, each reflecting a subset of the data. When these plots are combined, they form frames that appear to move, similar to a flipbook or cartoon.\n\n\n\n\nBefore creating an animated statistical graph, it’s helpful to understand some key concepts -\n\nFrame: In an animated line graph, each frame represents a moment in time or a category. When the frame changes, the data points update to reflect new information.\nAnimation Attributes: These are settings that control how the animation plays such as frame duration, easing functions, and whether it starts at the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#installing-and-loading-the-packages",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.2.1 Installing and loading the packages",
    "text": "4.2.1 Installing and loading the packages\nThis exercise uses the following R packages:\n\nggridges: For ridgeline plots (ggplot2 extension)\nggdist: For visualizing distribution and uncertainty\ntidyverse: For modern data science and visualization\nggthemes: For additional themes, scales, and geoms in ggplot\ncolorspace: For color selection and manipulation in visualizations\n\nThe code chunk below loads these packages into the RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#data-import",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.2.2 Data import",
    "text": "4.2.2 Data import\nFor this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.1 Plotting ridgeline graph: ggridges method",
    "text": "4.3.1 Plotting ridgeline graph: ggridges method\nThere are multiple ways to create ridgeline plots in R. This section covers using the ggridges package, which provides two main geoms: geom_ridgeline() (uses height values directly) and geom_density_ridges()(estimates densities before plotting). The example below uses geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.2 Varying fill colors along the x axis",
    "text": "4.3.2 Varying fill colors along the x axis\nTo create ridgeline plots with varying fill colors along the x-axis, use  geom_ridgeline_gradient() or geom_density_ridges_gradient(). These function like their non-gradient counterparts but allow color variation instead of a solid fill. However, they do not support alpha transparency due to technical limitations.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.3 Mapping the probabilities directly onto colour",
    "text": "4.3.3 Mapping the probabilities directly onto colour\nIn addition to extra geom objects for ridgeline plots, the ggridges package offers stat_density_ridges() that replaces stat_density() in ggplot2. The figure below maps probabilities using stat(ecdf), representing the empirical cumulative density function for English\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.3.4 Ridgeline plots with quantile lines",
    "text": "4.3.4 Ridgeline plots with quantile lines\nUsing geom_density_ridges_gradient(), we can color the ridgeline plot by quantile with the stat(quantile) aesthetic, as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using numbers to define quantiles, we can specify quantiles by cut points, such as the 2.5% and 97.5% tails, to color the ridgeline plot, as shown below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#plotting-a-half-eye-graph",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.1 Plotting a Half Eye graph",
    "text": "4.4.1 Plotting a Half Eye graph\nWe plot a Half-Eye graph by using stat_halfeye() of ggdist package. This produces a Half Eye visualization, which contains a half-density and a slab-interval.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.4.2 Adding the boxplot with geom_boxplot()\nNext, we add a second geometry layer using ggplot2’s geom_boxplot(), which creates a narrower boxplot. The width is reduced and the opacity adjusted.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.4.3 Adding the Dot Plots with stat_dots()\nNext, we add the third geometry layer using ggdist’s stat_dots(), which creates a half-dotplot similar to a histogram. The side = “left” argument places it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html#finishing-touch",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "4.4.4 Finishing touch",
    "text": "4.4.4 Finishing touch\nFinally, coord_flip() from ggplot2 flips the raincloud chart horizontally for the raincloud effect, while theme_economist() from ggthemes gives it a polished, professional look.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.1.html",
    "title": "Hands-on Ex 4.1 - Visualising Distribution",
    "section": "",
    "text": "Visualizing distribution is a common practice in statistical analysis. We already explored methods like histograms, PDFs, boxplots, notch plots, and violin plots using ggplot2. This chapter introduces two newer techniques—ridgeline and raincloud plots—using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#installing-and-launching-r-packages",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.1 Installing and launching R packages",
    "text": "4.3.1 Installing and launching R packages\nWe will use ggstatsplot and tidyverse for this exercise.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-data",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.2 Importing data",
    "text": "4.3.2 Importing data\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.3 One-sample test: gghistostats() method",
    "text": "4.3.3 One-sample test: gghistostats() method\n gghistostats() is used to to build a visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#unpacking-the-bayes-factor",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.4 Unpacking the Bayes Factor",
    "text": "4.3.4 Unpacking the Bayes Factor\nA Bayes factor is the ratio of the likelihood of one hypothesis to another, indicating the strength of evidence for one theory over another. It helps evaluate data in support of a null hypothesis (H0) versus an alternative hypothesis (H1). The Bayes factor, often denoted as B10, mathematically compares the two hypotheses."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.5 How to interpret Bayes Factor",
    "text": "4.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. A common interpretation, proposed by Harold Jeffreys (1961) and modified by Lee and Wagenmakers (2013), is as follows:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.6 Two-sample mean test: ggbetweenstats()",
    "text": "4.3.6 Two-sample mean test: ggbetweenstats()\nggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "4.3.7 Oneway ANOVA Test: ggbetweenstats() method\n ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n4.3.7.1 ggbetweenstats - Summary of tests"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "4.3.8 Significant Test of Correlation: ggscatterstats()\n ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "4.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\n the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-excel-file-readxl-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#importing-excel-file-readxl-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.1 Importing Excel file: readxl methods",
    "text": "4.6.1 Importing Excel file: readxl methods\nWe use read_xls() of readxl package to import the data worksheet of ToyotaCorolla.xls workbook into R\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#multiple-regression-model-using-lm",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.2 Multiple Regression Model using lm()",
    "text": "4.6.2 Multiple Regression Model using lm()\nWe calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.3 Model Diagnostic: checking for multicolinearity:",
    "text": "4.6.3 Model Diagnostic: checking for multicolinearity:\nTo check multicolinearity - we use check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.4 Model Diagnostic: checking normality assumption",
    "text": "4.6.4 Model Diagnostic: checking normality assumption\n check_normality() of performance package is used for normality assumption.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.5 Model Diagnostic: Check model for homogeneity of variances",
    "text": "4.6.5 Model Diagnostic: Check model for homogeneity of variances\n check_heteroscedasticity() of performance package is used to check for homogeneity of variances\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#model-diagnostic-complete-check",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.6 Model Diagnostic: Complete check",
    "text": "4.6.6 Model Diagnostic: Complete check\nWe can also do the complete check using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.7 Visualising Regression Parameters: see methods",
    "text": "4.6.7 Visualising Regression Parameters: see methods\nplot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "4.6.8 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "4.6.8 Visualising Regression Parameters: ggcoefstats() methods\n ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-and-loading-the-packages",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.2.1 Installing and loading the packages",
    "text": "4.2.1 Installing and loading the packages\nThis exercise will use the following R packages:\n\ntidyverse: A collection of packages for data science\nplotly: For interactive plots\ngganimate: For animation plots\nDT: For interactive HTML tables\ncrosstalk: For cross-widget interactions (e.g., linked brushing and filtering)\nggdist: For visualizing distribution and uncertainty\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#data-import",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.2.2 Data import",
    "text": "4.2.2 Data import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.3.1 Plotting standard error bars of point estimates",
    "text": "4.3.1 Plotting standard error bars of point estimates\nNow, we plot the standard error bars of mean maths score by race\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.3.2 Plotting confidence interval of point estimates",
    "text": "4.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this part, we plot interactive error bars for the 99% confidence interval of mean maths score by race\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nUsing  stat_pointinterval() of ggdist , we build a visual for displaying distribution of maths scores by race\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nstat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#installing-ungeviz-package",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.5.1 Installing ungeviz package",
    "text": "4.5.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#launch-the-application-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#launch-the-application-in-r",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.5.2 Launch the application in R",
    "text": "4.5.2 Launch the application in R\n\nlibrary(ungeviz)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "4.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "4.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nThe code chunk below is used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.4.1 FunnelPlotR methods: The basic plot",
    "text": "4.4.1 FunnelPlotR methods: The basic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThe funnel plot has 267 points, with 0 outliers, and is adjusted for overdispersion. Key points:\n\ngroup defines the level of points (e.g., Sub-district, District, or City).\nFor Cityc, there are only 6 data points.\nBy default, data_type is set to “SR”.\nlimit defines plot limits (95 or 99), representing 95% or 99.8% quantiles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.4.2 FunnelPlotR methods: Makeover 1",
    "text": "4.4.2 FunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThe funnel plot has 267 points, with 7 outliers, and is adjusted for overdispersion. Key points:\n\ndata_type changes from the default “SR” to “PR” (proportions).\nxrange and yrange set the x-axis and y-axis ranges."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.4.3 FunnelPlotR methods: Makeover 2",
    "text": "4.4.3 FunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThe funnel plot has 267 points, with 7 outliers, and is adjusted for overdispersion. Key points:\n\nlabel = NA removes the default outlier labels.\ntitle adds the plot title.\nx_label and y_label modify the x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#computing-the-basic-derived-fields",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.1 Computing the basic derived fields",
    "text": "4.5.1 Computing the basic derived fields\nTo plot the funnel plot, we first need to calculate the cumulative death rate and its standard error.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nNow, we compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.3 Plotting a static funnel plot",
    "text": "4.5.3 Plotting a static funnel plot\nWe use ggplot2 functions to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "4.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "4.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.4.html",
    "title": "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plots are used for unbiased comparisons between outlets or business entities. In this exercise, we will - plot funnel plots with the funnelPlotR package, create static funnel plots using ggplot2, create interactive funnel plots with plotly and ggplot2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.3.html",
    "title": "Hands-on Ex 4.3 - Visualising Uncertainity",
    "section": "",
    "text": "In this chapter, we will visualize uncertainty through statistical graphics. By the end, we will -\n\nPlot error bars with ggplot2\nCreate interactive error bars using ggplot2, plotly, and DT\nMake advanced plots with ggdist\nCreate hypothetical outcome plots (HOPs) using the ungeviz package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.2.html",
    "title": "Hands-on Ex 4.2 - Visual Statistical Analysis",
    "section": "",
    "text": "In this exercise, you will use:\n\nggstatsplot for creating visual graphics with statistical information,\nperformance for model diagnostics, and\nparameters for visualizing model parameters."
  }
]