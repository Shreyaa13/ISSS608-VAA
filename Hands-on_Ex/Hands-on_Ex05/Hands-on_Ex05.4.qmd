---
title: "Hands-on Ex 5.4 - Visual Multivariate Analysis with Parallel Coordinates Plot"
author: "Shreya Agarwal"
date: "February 6, 2025"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  message: false
  freeze: true
---

# **5.1 Overview**

A parallel coordinates plot is a visualization technique for exploring multivariate numerical data, ideal for comparing multiple variables and identifying relationships—such as factors influencing the Happiness Index. Developed by [Alfred Inselberg](http://www.math.tau.ac.il/~aiisreal/) in the 1970s, it is widely used in academic and scientific fields rather than business settings.

As noted by Stephen Few (2006), this chart is best suited for interactive analysis rather than general presentation, helping uncover meaningful multivariate patterns. It is particularly useful in tasks like customer segmentation to characterize detected clusters.

In this hands-on exercise, we will :

-   Create static parallel coordinates plots using **ggparcoord()** from the **GGally** package.

-   Build interactive parallel coordinates plots with the **parcoords** package.

-   Use the **parallelPlot** package for interactive visualization.

# **5.2 Installing and Launching R Packages**

The **GGally**, **parcoords**, **parallelPlot** and **tidyverse** packages will be installed and loaded in R.

```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

# **5.3 Data Preparation**

In this hands-on exercise, we will use the **World Happiness 2018** dataset. The original data, available [here](https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls), was in Microsoft Excel format and has been converted to CSV as WHData-2018.csv.

The code below imports *WHData-2018.csv* into R using the read_csv() function from the readr package and saves it as a tibble data frame named *wh*.

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

# **5.4 Plotting Static Parallel Coordinates Plot**

We plot static parallel coordinates plot using [`ggparcoord()`](https://ggobi.github.io/ggally/reference/ggparcoord.html) of **GGally** package. 

## **5.4.1 Plotting a simple parallel coordinates**

Code chunk below is used to plot a basic static parallel coordinates plot by using `ggparcoord()`.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12))
```

Here, only two arguments are used: *data* specifies the data object (i.e., `wh`) and *columns* selects the variables for creating the parallel coordinates plot.

## **5.4.2 Plotting a parallel coordinates with boxplot**

The basic parallel coordinates plot does not provide meaningful insights into the World Happiness measures. This section will demonstrate how to enhance the plot using various arguments available in `ggparcoord()`.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Parallel Coordinates Plot of World Happines Variables")
```

#### Key Takeaways from the Code Chunk:

-   `groupColumn`: Groups observations (parallel lines) based on a single variable (e.g., *Region*) and assigns colors accordingly.
-   `scale`: Applies the *uniminmax* method to scale each variable between 0 and 1.
-   `alphaLines`: Adjusts line transparency to 0.2 (range: 0 to 1) for better readability.
-   `boxplot`: Enables boxplots within the parallel coordinates plot when set to `TRUE` (default is `FALSE`).
-   `title`: Adds a descriptive title to the plot.

## **5.4.3 Parallel coordinates with facet**

Since `ggparcoord()` is built on **ggplot2**, we can integrate ggplot2 functions to enhance the parallel coordinates plot.

In the code chunk below, **`facet_wrap()`** is used to create 10 small multiple parallel coordinate plots, each representing a different geographical region (e.g., *East Asia*). This allows for a more detailed comparison across regions.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region)
```

One of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.

## **5.4.4 Rotating x-axis text label**

To make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using `theme()` function in ggplot2 as shown in the code chunk below

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30))
```

Thing to learn from the code chunk above:

-   To rotate x-axis text labels, we use `axis.text.x` as argument to `theme()` function. And we specify `element_text(angle = 30)` to rotate the x-axis text by an angle 30 degree.

## **5.4.5 Adjusting the rotated x-axis text label**

Rotating x-axis labels to 30 degrees can cause overlap with the plot. To prevent this, we can adjust the horizontal justification (`hjust`) within `element_text()` inside the `theme()` function.

By applying `axis.text.x = element_text(angle = 30, hjust = 1)`, we ensure that the labels remain readable without interfering with the plot.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30, hjust=1))
```

# **5.5 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods**

The [**parallelPlot**](https://cran.r-project.org/web/packages/parallelPlot/) package in R is designed for creating interactive parallel coordinates plots using the htmlwidgets package and D3.js.

In this section, you'll explore how to use functions from the parallelPlot package to build an interactive parallel coordinates plot, allowing for dynamic exploration of multivariate data.

## **5.5.1 The basic plot**

The code chunk below plot an interactive parallel coordinates plot by using `parallelPlot()`.

```{r}
wh <- wh %>%
  select("Happiness score", c(7:12))
parallelPlot(wh,
             width = 320,
             height = 250)
```

## **5.5.2 Rotate axis label**

In the code chunk below, `rotateTitle` argument is used to avoid overlapping axis labels.

```{r}
parallelPlot(wh,
             rotateTitle = TRUE)
```

One of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.

## **5.5.3 Changing the colour scheme**

We can change the default blue colour scheme by using `continousCS` argument as shown in the code chunk below.

```{r}
parallelPlot(wh,
             continuousCS = "YlOrRd",
             rotateTitle = TRUE)
```

## **5.5.4 Parallel coordinates plot with histogram**

In the code chunk below, `histoVisibility` argument is used to plot histogram along the axis of each variables.

```{r}
histoVisibility <- rep(TRUE, ncol(wh))
parallelPlot(wh,
             rotateTitle = TRUE,
             histoVisibility = histoVisibility)
```

# 5.6 References

-   [*ggparcoord()*](http://ggobi.github.io/ggally/reference/ggparcoord.html) of [**GGally**](http://ggobi.github.io/ggally/index.html) package
-   [**parcoords** user guide](https://cran.r-project.org/web/packages/parcoords/parcoords.pdf)
-   [**parallelPlot**](https://cran.r-project.org/web/packages/parallelPlot/parallelPlot.pdf)
