---
title: "Hands-on Ex 5.5 - Treemap Visualisation with R"
author: "Shreya Agarwal"
date: "February 6, 2025"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  message: false
  freeze: true
---

# **5.1 Overview**

In this hands-on exercise, we will create treemaps using R. You will first manipulate transaction data into a treemap structure using functions from the **dplyr** package. Then, you will plot a static treemap using the **treemap** package. Finally, you will design an interactive treemap using the **d3treeR** package.

# **5.2 Installing and Launching R Packages**

Before we get started, we have to install **treemap** and **tidyverse** packages

```{r}
pacman::p_load(treemap, treemapify, tidyverse) 
```

# **5.3 Data Wrangling**

In this exercise, the REALIS2018.csv dataset will be used. It contains private property transaction records from 2018 and is extracted from the REALIS portal of the [**Urban Redevelopment Authority (URA)**](https://spring.ura.gov.sg/lad/ore/login/index.cfm)

## **5.3.1 Importing the data set**

*read_csv()* of **readr** is used to import realis2018.csv into R and parsed it into tibble R dataframe format.

```{r}
realis2018 <- read_csv("data/realis2018.csv")
```

## **5.3.2 Data Wrangling and Manipulation**

The realis2018 dataset is highly disaggregated and not suitable for treemap visualization. To prepare it, we will:

1.  *Group* transaction records by *Project Name, Planning Region, Planning Area, Property Type, and Type of Sale.*
2.  Summarize key metrics:
    -   Total Units Sold (sum of *No. of Units*)
    -   Total Area (sum of *Area (sqm)*)
    -   Median Unit Price (*Unit Price (\$ psm)*)
    -   Median Transacted Price (*Transacted Price (\$)*)

The **dplyr** functions `group_by()` and `summarize()` will be used:

-   `group_by()` organizes data into groups for analysis.
-   `summarize()` computes summary statistics for each group.

## **5.3.3 Grouped summaries without the Pipe**

The code chank below shows a typical two lines code approach to perform the steps.

```{r}
realis2018_grouped <- group_by(realis2018, `Project Name`,
                               `Planning Region`, `Planning Area`, 
                               `Property Type`, `Type of Sale`)
realis2018_summarised <- summarise(realis2018_grouped, 
                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), 
                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

The code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it

## **5.3.4 Grouped summaries with the *pipe***

The code chunk below shows a more efficient way to tackle the same processes by using the *pipe*

```{r}
realis2018_summarised <- realis2018 %>% 
  group_by(`Project Name`,`Planning Region`, 
           `Planning Area`, `Property Type`, 
           `Type of Sale`) %>%
  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), 
            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

# **5.4 Designing Treemap with treemap Package**

The **treemap** package in R provides extensive flexibility for creating treemaps. Its core function, `treemap()`, supports over 43 arguments. This section will focus on the key arguments needed to design elegant and meaningful treemaps.

## **5.4.1 Designing a static treemap**

In this section, **`treemap()`** from the **Treemap** package is used to visualize the distribution of median unit prices and total units sold for resale condominiums by geographic hierarchy in 2017.

First, we filter resale condominium records from the `realis2018_selected` data frame.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

## **5.4.2 Using the basic arguments**

The code chunk below designed a treemap by using three core arguments of *treemap()*, namely: *index*, *vSize* and *vColor*.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

#### Key Takeaways from the Three Arguments:

-   `index`:
    -   Must include at least two column names to create a hierarchical treemap.
    -   The first column represents the highest aggregation level, followed by the next levels.
-   `vSize`:
    -   The specified column must not contain negative values as it determines the size of rectangles in the treemap.

#### Warning:

-   The treemap above is incorrectly colored because it does not represent median unit prices with varying color intensities.
-   To fix this, use `vColor` along with `type` to define color mapping.
-   By default, `type = index`, meaning colors represent planning area hierarchy instead of median prices.

## **5.4.3 Working with *vColor* and *type* arguments**

In the code chunk below, *type* argument is define as value.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Thinking to learn from the code chunk above.

-   The rectangles are coloured with different intensity of green, reflecting their respective median unit prices.
-   The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.

## **5.4.4 Colours in treemap package**

The mapping and palette arguments control how colors are applied in a treemap. The main difference between "value" and "manual" lies in their default mapping approach. When using "value," the treemap assumes a diverging color palette, such as ColorBrewer’s "RdYlBu," where 0 is assigned to the middle color (often white or yellow), the most negative value (-max(abs(values))) is mapped to the left-end color, and the most positive value (max(abs(values))) is mapped to the right-end color. In contrast, the "manual" option directly assigns the minimum value to the left-end color, the maximum value to the right-end color, and the midpoint of the range to the middle color.

## **5.4.5 The “value” type treemap**

The code chunk below shows a value type treemap.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Thing to learn from the code chunk above:

-   although the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.
-   The reason why we see only 5000 to 45000 in the legend is because the *range* argument is by default c(min(values, max(values)) with some pretty rounding.

## **5.4.6 The “manual” type treemap**

The “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.

The code chunk below shows a manual type treemap.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Things to learn from the code chunk above:

-   The colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as *RdYlBu* if the values are all positive or negative

To overcome this problem, a single colour palette such as Blues should be used.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## **5.4.7 Treemap Layout**

The `treemap()` function supports two widely used treemap layouts: "squarified" and "pivotSize," with "pivotSize" set as the default. The squarified algorithm (Bruls et al., 2000) focuses on creating rectangles with balanced aspect ratios but does not preserve the sorting order (sortID). In contrast, the pivot-by-size algorithm (Bederson et al., 2002) maintains the specified sorting order while still achieving reasonably proportioned rectangles.

## **5.4.8 Working with *algorithm* argument**

The code chunk below plots a squarified treemap by changing the *algorithm* argument.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "squarified",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## **5.4.9 Using *sortID***

When “pivotSize” algorithm is used, *sortID* argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "pivotSize",
        sortID = "Median Transacted Price",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

# **5.5 Designing Treemap using treemapify Package**

**treemapify** is a R package specially developed to draw treemaps in **ggplot2**. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using **treemapify**.

## **5.5.1 Designing a basic treemap**

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") + 
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```

## **5.5.2 Defining hierarchy**

Group by Planning Region

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`),
       start = "topleft") + 
  geom_treemap()
```

Group by Planning Area

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap()
```

Adding boundary line

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "gray40",
                                size = 2) +
  geom_treemap_subgroup_border(colour = "gray20")
```

# **5.6 Designing Interactive Treemap using d3treeR**

## **5.6.1 Installing *d3treeR* package**

We will load the *devtools* library and install the package found in github by using the codes below.

```{r}
library(devtools)
install_github("timelyportfolio/d3treeR")
```

Now launch *d3treeR* package

```{r}
library(d3treeR)
```

## **5.6.2 Designing An Interactive Treemap**

The codes below perform two processes.

1.  *treemap()* is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called ***tm***.

```{r}
tm <- treemap(realis2018_summarised,
        index=c("Planning Region", "Planning Area"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        title="Private Residential Property Sold, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

2.  Then *d3tree()* is used to build an interactive treemap.

```{r}
d3tree(tm,rootname = "Singapore" )
```
