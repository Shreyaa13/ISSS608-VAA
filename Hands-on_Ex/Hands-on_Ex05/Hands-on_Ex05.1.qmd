---
title: "Hands-on Ex 5.1 - Creating Ternary Plot with R"
author: "Shreya Agarwal"
date: "February 6, 2025"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  message: false
  freeze: true
---

# **5.1 Overview**

Ternary plots visualize the distribution of three-part compositional data, such as population structure or soil composition, using a triangular diagram scaled from 0 to 1. Points are positioned based on their component values. In this hands-on, we will create ternary plots in R to analyze Singapore’s population structure through four steps:

1.  Install and load **tidyverse** and **ggtern**.
2.  Compute three measures using `mutate()` from **dplyr**.
3.  Create a static ternary plot with `ggtern()`.
4.  Build an interactive ternary plot using `plot_ly()` from **Plotly**.

# **5.2 Installing and launching R packages**

This exercise uses two main R packages:

-   [**ggtern**](http://www.ggtern.com/): A ggplot extension for creating static ternary plots.
-   [**Plotly R**](https://plot.ly/r/): Enables interactive web-based graphs via plotly.js, with `ggplotly()` converting ggplot2 figures into Plotly objects.

Additionally, **readr, dplyr,** and **tidyr** from **tidyverse** must be installed and loaded.

Since the latest ggtern is incompatible with the newest ggplot2, version 3.2.1 of ggplot2 will be installed instead. The code below will handle this.

```{r}
pacman::p_load(plotly, ggtern, tidyverse)

```

# **5.3 Data Preparation**

## **5.3.1 The data**

This exercise uses the [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) dataset. The CSV file, *respopagsex2000to2018_tidy.csv,* is used.

## **5.3.2 Importing Data**

***read_csv()*** function of **readr** package will be used to import the csv file.

```{r}
#Reading the data into R environment
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

## **5.3.3 Preparing the Data**

We use the ***mutate()*** function of **dplyr** package to derive three new measures, namely: young, active, and old.

```{r}
#Deriving the young, economy active and old measures
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

# **5.4 Plotting Ternary Diagram with R**

## **5.4.1 Plotting a static ternary diagram**

Using ***ggtern()*** function of **ggtern** package to create a simple ternary plot.

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

## **5.4.2 Plotting an interative ternary diagram**

Creating an interactive ternary plot using ***plot_ly()*** function of **Plotly R**.

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```
