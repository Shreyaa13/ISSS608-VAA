---
title: "Hands-on Ex 4.4 - Funnel Plots for Fair Comparisons"
author: "Shreya Agarwal"
date: "February 1, 2025"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  message: false
  freeze: true
---

# **4.1 Overview**

Funnel plots are used for unbiased comparisons between outlets or business entities. In this exercise, we will - plot funnel plots with the funnelPlotR package, create static funnel plots using ggplot2, create interactive funnel plots with plotly and ggplot2

# **4.2 Installing and Launching R Packages**

In this exercise, four R packages will be used. They are:

-   **readr** for importing csv into R.
-   **FunnelPlotR** for creating funnel plot.
-   **ggplot2** for creating funnel plot manually.
-   **knitr** for building static html table.
-   **plotly** for creating interactive funnel plot.

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

# **4.3 Importing Data**

We’ll use the COVID-19_DKI_Jakarta dataset, from the [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/), to compare cumulative cases and deaths by sub-district (kelurahan) as of July 31, 2021. The code imports the data into R and saves it as a tibble data frame called *covid19.*

```{r}
covid19 <- read_csv("data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)
```

# **4.4 FunnelPlotR methods**

The [**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot for funnel plots, requiring a numerator (events), denominator (population), and group. Customization options include:

-   `limit`: plot limits (95 or 99)
-   `label_outliers`: label outliers (true/false)
-   `Poisson_limits`: add Poisson limits
-   `OD_adjust`: add overdispersed limits
-   `xrange`, `yrange`: specify axis range (zoom)
-   Other aesthetics like title and axis labels.

## **4.4.1 FunnelPlotR methods: The basic plot**

```{r}
funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```

The funnel plot has 267 points, with 0 outliers, and is adjusted for overdispersion. Key points:

-   `group` defines the level of points (e.g., Sub-district, District, or City).
-   For Cityc, there are only 6 data points.
-   By default, `data_type` is set to "SR".
-   `limit` defines plot limits (95 or 99), representing 95% or 99.8% quantiles.

## **4.4.2 FunnelPlotR methods: Makeover 1**

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #<<
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```

The funnel plot has 267 points, with 7 outliers, and is adjusted for overdispersion. Key points:

-   `data_type` changes from the default "SR" to "PR" (proportions).
-   `xrange` and `yrange` set the x-axis and y-axis ranges.

## **4.4.3 FunnelPlotR methods: Makeover 2**

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```

The funnel plot has 267 points, with 7 outliers, and is adjusted for overdispersion. Key points:

-   `label = NA` removes the default outlier labels.
-   `title` adds the plot title.
-   `x_label` and `y_label` modify the x-axis and y-axis titles.

# **4.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods**

In this section, we will build funnel plots step-by-step using ggplot2, enhancing our skills in customizing specialized visualizations like funnel plots.

## **4.5.1 Computing the basic derived fields**

To plot the funnel plot, we first need to calculate the cumulative death rate and its standard error.

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

Next, the *fit.mean* is computed by using the code chunk below.

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

## **4.5.2 Calculate lower and upper limits for 95% and 99.9% CI**

Now, we compute the lower and upper limits for 95% confidence interval.

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

## **4.5.3 Plotting a static funnel plot**

We use ggplot2 functions to plot a static funnel plot.

```{r}
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

## **4.5.4 Interactive Funnel Plot: plotly + ggplot2**

The funnel plot created using ggplot2 functions can be made interactive with `ggplotly()` of **plotly** r package.

```{r}
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```

# **4.6 References**

-   [funnelPlotR](https://nhs-r-community.github.io/FunnelPlotR/index.html) package.
-   [Funnel Plots for Indirectly-standardised ratios](https://nhs-r-community.github.io/FunnelPlotR/articles/funnel_plots.html).
-   [Changing funnel plot options](https://nhs-r-community.github.io/FunnelPlotR/articles/changing_funnel_plot_options.html)
-   [ggplot2](https://ggplot2.tidyverse.org/) package.
